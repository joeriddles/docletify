Loading source files for package org.jcp.xml.dsig.internal...
Loading source files for package org.jcp.xml.dsig.internal.dom...
Loading source files for package org.ietf.jgss...
Constructing Javadoc information...
{"parameters":null,"name":"SignerOutputStream","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"Signature:sig","name":"SignerOutputStream","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":null}],"methods":[{"parameters":"int:arg0","name":"write","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":"void"},{"parameters":"byte[]:arg0,int:arg1,int:arg2","name":"write","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":"void"}],"fields":[{"parameters":null,"name":"sig","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":" Derived from Apache sources and changed to use java.security.Signature\n objects as input instead of\n com.sun.org.apache.xml.internal.security.algorithms.SignatureAlgorithm objects.\n\n @author raul\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"MacOutputStream","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"Mac:mac","name":"MacOutputStream","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":null}],"methods":[{"parameters":"int:arg0","name":"write","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":"void"},{"parameters":"byte[]:arg0,int:arg1,int:arg2","name":"write","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":"void"}],"fields":[{"parameters":null,"name":"mac","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":" Derived from Apache sources and changed to use Mac objects instead of\n com.sun.org.apache.xml.internal.security.algorithms.SignatureAlgorithm objects.\n\n @author raul\n @author Sean Mullan\n\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DigesterOutputStream","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"MessageDigest:md","name":"DigesterOutputStream","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":" Creates a DigesterOutputStream.\n\n @param md the MessageDigest\n","return_type":null},{"parameters":"MessageDigest:md,boolean:buffer","name":"DigesterOutputStream","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":" Creates a DigesterOutputStream.\n\n @param md the MessageDigest\n @param buffer if true, caches the input bytes\n","return_type":null}],"methods":[{"parameters":"int:input","name":"write","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":"void"},{"parameters":"byte[]:input,int:offset,int:len","name":"write","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":"void"},{"parameters":null,"name":"getDigestValue","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":" @return the digest value\n","return_type":"byte"},{"parameters":null,"name":"getInputStream","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":" @return an input stream containing the cached bytes, or\n    null if not cached\n","return_type":"InputStream"},{"parameters":null,"name":"close","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":"void"}],"fields":[{"parameters":null,"name":"log","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":null},{"parameters":null,"name":"buffer","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal","description":"","return_type":null},{"parameters":null,"name":"bos","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":"","return_type":null},{"parameters":null,"name":"md","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal","description":" This class has been modified slightly to use java.security.MessageDigest\n objects as input, rather than\n com.sun.org.apache.xml.internal.security.algorithms.MessageDigestAlgorithm objects.\n It also optionally caches the input bytes.\n\n @author raul\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"XMLDSigRI","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"XMLDSigRI","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[],"fields":[{"parameters":null,"name":"serialVersionUID","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"INFO","modifier":"private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" Defines the XMLDSigRI provider.\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"Utils","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"Utils","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"InputStream:is","name":"readBytesFromStream","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"byte"},{"parameters":"java.util.Iterator:i","name":"toNodeSet","modifier":"package-private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Converts an Iterator to a Set of Nodes, according to the XPath\n Data Model.\n\n @param i the Iterator\n @return the Set of Nodes\n","return_type":"Set"},{"parameters":"String:uri","name":"parseIdFromSameDocumentURI","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the ID from a same-document URI (ex: \"#id\")\n","return_type":"String"},{"parameters":"String:uri","name":"sameDocumentURI","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns true if uri is a same-document URI, false otherwise.\n","return_type":"boolean"},{"parameters":"XMLCryptoContext:xc","name":"secureValidation","modifier":"package-private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"XMLCryptoContext:xc,String:name","name":"getBoolean","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" Miscellaneous static utility methods for use in JSR 105 RI.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMXSLTTransform","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMXSLTTransform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"TransformParameterSpec:params","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Element:sheet","name":"unmarshalParams","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"marshalParams","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of XSLT Transform.\n (Uses Apache XML-Sec Transform implementation)\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMXPathTransform","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMXPathTransform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"TransformParameterSpec:params","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Element:paramsElem","name":"unmarshalParams","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"marshalParams","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of XPath Filtering Transform.\n (Uses Apache XML-Sec Transform implementation)\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMXPathFilter2Transform","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMXPathFilter2Transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"TransformParameterSpec:params","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Element:curXPathElem","name":"unmarshalParams","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"marshalParams","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of XPath Filter 2.0 Transform.\n (Uses Apache XML-Sec Transform implementation)\n\n @author Joyce Leung\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMXMLSignatureFactory","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMXMLSignatureFactory","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Initializes a new instance of this class.\n","return_type":null}],"methods":[{"parameters":"SignedInfo:si,KeyInfo:ki","name":"newXMLSignature","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLSignature"},{"parameters":"SignedInfo:si,KeyInfo:ki,java.util.List:objects,String:id,String:signatureValueId","name":"newXMLSignature","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLSignature"},{"parameters":"String:uri,DigestMethod:dm","name":"newReference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Reference"},{"parameters":"String:uri,DigestMethod:dm,java.util.List:transforms,String:type,String:id","name":"newReference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Reference"},{"parameters":"String:uri,DigestMethod:dm,java.util.List:appliedTransforms,Data:result,java.util.List:transforms,String:type,String:id","name":"newReference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Reference"},{"parameters":"String:uri,DigestMethod:dm,java.util.List:transforms,String:type,String:id,byte[]:digestValue","name":"newReference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Reference"},{"parameters":"CanonicalizationMethod:cm,SignatureMethod:sm,java.util.List:references","name":"newSignedInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"SignedInfo"},{"parameters":"CanonicalizationMethod:cm,SignatureMethod:sm,java.util.List:references,String:id","name":"newSignedInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"SignedInfo"},{"parameters":"java.util.List:content,String:id,String:mimeType,String:encoding","name":"newXMLObject","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLObject"},{"parameters":"java.util.List:references","name":"newManifest","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Manifest"},{"parameters":"java.util.List:references,String:id","name":"newManifest","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Manifest"},{"parameters":"java.util.List:props,String:id","name":"newSignatureProperties","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"SignatureProperties"},{"parameters":"java.util.List:info,String:target,String:id","name":"newSignatureProperty","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"SignatureProperty"},{"parameters":"XMLValidateContext:context","name":"unmarshalXMLSignature","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLSignature"},{"parameters":"XMLStructure:xmlStructure","name":"unmarshalXMLSignature","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLSignature"},{"parameters":"Node:node,XMLCryptoContext:context","name":"unmarshal","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLSignature"},{"parameters":"String:feature","name":"isFeatureSupported","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"String:algorithm,DigestMethodParameterSpec:params","name":"newDigestMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"DigestMethod"},{"parameters":"String:algorithm,SignatureMethodParameterSpec:params","name":"newSignatureMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"SignatureMethod"},{"parameters":"String:algorithm,TransformParameterSpec:params","name":"newTransform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Transform"},{"parameters":"String:algorithm,XMLStructure:params","name":"newTransform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Transform"},{"parameters":"String:algorithm,C14NMethodParameterSpec:params","name":"newCanonicalizationMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"CanonicalizationMethod"},{"parameters":"String:algorithm,XMLStructure:params","name":"newCanonicalizationMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"CanonicalizationMethod"},{"parameters":null,"name":"getURIDereferencer","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"URIDereferencer"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of XMLSignatureFactory.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMXMLSignatureFactory.UnmarshalContext","modifier":"private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"UnmarshalContext","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[],"fields":[],"abstract":false,"static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMXMLSignature","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"SignedInfo:si,KeyInfo:ki,java.util.List:objs,String:id,String:signatureValueId","name":"DOMXMLSignature","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMXMLSignature</code> from the specified components.\n\n @param si the <code>SignedInfo</code>\n @param ki the <code>KeyInfo</code>, or <code>null</code> if not specified\n @param objs a list of <code>XMLObject</code>s or <code>null</code>\n  if not specified. The list is copied to protect against subsequent\n  modification.\n @param id an optional id (specify <code>null</code> to omit)\n @param signatureValueId an optional id (specify <code>null</code> to\n  omit)\n @throws NullPointerException if <code>si</code> is <code>null</code>\n","return_type":null},{"parameters":"Element:sigElem,XMLCryptoContext:context,Provider:provider","name":"DOMXMLSignature","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMXMLSignature</code> from XML.\n\n @param sigElem Signature element\n @throws MarshalException if XMLSignature cannot be unmarshalled\n","return_type":null}],"methods":[{"parameters":null,"name":"getId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getKeyInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"KeyInfo"},{"parameters":null,"name":"getSignedInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"SignedInfo"},{"parameters":null,"name":"getObjects","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":null,"name":"getSignatureValue","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLSignature.SignatureValue"},{"parameters":null,"name":"getKeySelectorResult","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"KeySelectorResult"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Node:parent,Node:nextSibling,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLValidateContext:vc","name":"validate","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"XMLSignContext:signContext","name":"sign","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":"DOMReference:ref,XMLSignContext:signContext","name":"digestReference","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[{"parameters":null,"name":"log","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"id","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"sv","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ki","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"objects","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"si","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ownerDoc","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"localSigElem","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"sigElem","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"validationStatus","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"validated","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ksr","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"signatureIdMap","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of XMLSignature.\n\n @author Sean Mullan\n @author Joyce Leung\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMXMLSignature.DOMSignatureValue","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"String:id","name":"DOMSignatureValue","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:sigValueElem,XMLCryptoContext:context","name":"DOMSignatureValue","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getValue","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"byte"},{"parameters":"XMLValidateContext:validateContext","name":"validate","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"byte[]:value","name":"setValue","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[{"parameters":null,"name":"id","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"value","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"valueBase64","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"sigValueElem","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"validated","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"validationStatus","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMXMLObject","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"java.util.List:content,String:id,String:mimeType,String:encoding","name":"DOMXMLObject","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates an <code>XMLObject</code> from the specified parameters.\n\n @param content a list of {@link XMLStructure}s. The list\n    is defensively copied to protect against subsequent modification.\n    May be <code>null</code> or empty.\n @param id the Id (may be <code>null</code>)\n @param mimeType the mime type (may be <code>null</code>)\n @param encoding the encoding (may be <code>null</code>)\n @return an <code>XMLObject</code>\n @throws ClassCastException if <code>content</code> contains any\n    entries that are not of type {@link XMLStructure}\n","return_type":null},{"parameters":"Element:objElem,XMLCryptoContext:context,Provider:provider","name":"DOMXMLObject","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates an <code>XMLObject</code> from an element.\n\n @param objElem an Object element\n @throws MarshalException if there is an error when unmarshalling\n","return_type":null}],"methods":[{"parameters":null,"name":"getContent","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":null,"name":"getId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getMimeType","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getEncoding","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":"java.util.List:otherContent","name":"equalsContent","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"}],"fields":[{"parameters":null,"name":"id","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"mimeType","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"encoding","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"content","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"objectElem","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of XMLObject.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMX509IssuerSerial","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"String:issuerName,BigInteger:serialNumber","name":"DOMX509IssuerSerial","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMX509IssuerSerial</code> containing the specified\n issuer distinguished name/serial number pair.\n\n @param issuerName the X.509 issuer distinguished name in RFC 2253\n    String format\n @param serialNumber the serial number\n @throws IllegalArgumentException if the format of <code>issuerName</code>\n    is not RFC 2253 compliant\n @throws NullPointerException if <code>issuerName</code> or\n    <code>serialNumber</code> is <code>null</code>\n","return_type":null},{"parameters":"Element:isElem","name":"DOMX509IssuerSerial","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMX509IssuerSerial</code> from an element.\n\n @param isElem an X509IssuerSerial element\n","return_type":null}],"methods":[{"parameters":null,"name":"getIssuerName","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getSerialNumber","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"BigInteger"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Object:obj","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[{"parameters":null,"name":"issuerName","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"serialNumber","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of X509IssuerSerial.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMX509Data","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"java.util.List:content","name":"DOMX509Data","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a DOMX509Data.\n\n @param content a list of one or more X.509 data types. Valid types are\n    {@link String} (subject names), <code>byte[]</code> (subject key ids),\n    {@link java.security.cert.X509Certificate}, {@link X509CRL},\n    or {@link javax.xml.dsig.XMLStructure} ({@link X509IssuerSerial}\n    objects or elements from an external namespace). The list is\n    defensively copied to protect against subsequent modification.\n @return a <code>X509Data</code>\n @throws NullPointerException if <code>content</code> is <code>null</code>\n @throws IllegalArgumentException if <code>content</code> is empty\n @throws ClassCastException if <code>content</code> contains any entries\n    that are not of one of the valid types mentioned above\n","return_type":null},{"parameters":"Element:xdElem","name":"DOMX509Data","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMX509Data</code> from an element.\n\n @param xdElem an X509Data element\n @throws MarshalException if there is an error while unmarshalling\n","return_type":null}],"methods":[{"parameters":null,"name":"getContent","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"byte[]:skid,Node:parent,Document:doc,String:dsPrefix","name":"marshalSKI","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"String:name,Node:parent,Document:doc,String:dsPrefix","name":"marshalSubjectName","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"X509Certificate:cert,Node:parent,Document:doc,String:dsPrefix","name":"marshalCert","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"X509CRL:crl,Node:parent,Document:doc,String:dsPrefix","name":"marshalCRL","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Element:elem","name":"unmarshalX509Certificate","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"X509Certificate"},{"parameters":"Element:elem","name":"unmarshalX509CRL","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"X509CRL"},{"parameters":"Element:elem","name":"unmarshalBase64Binary","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"ByteArrayInputStream"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[{"parameters":null,"name":"content","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"cf","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of X509Data.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMUtils","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMUtils","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"Node:node","name":"getOwnerDocument","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the owner document of the specified node.\n\n @param node the node\n @return the owner document\n","return_type":"Document"},{"parameters":"Document:doc,String:tag,String:nsURI,String:prefix","name":"createElement","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates an element in the specified namespace, with the specified tag\n and namespace prefix.\n\n @param doc the owner document\n @param tag the tag\n @param nsURI the namespace URI\n @param prefix the namespace prefix\n @return the newly created element\n","return_type":"Element"},{"parameters":"Element:elem,String:name,String:value","name":"setAttribute","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Sets an element's attribute (using DOM level 2) with the\n specified value and namespace prefix.\n\n @param elem the element to set the attribute on\n @param name the name of the attribute\n @param value the attribute value. If null, no attribute is set.\n","return_type":"void"},{"parameters":"Element:elem,String:name,String:value","name":"setAttributeID","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Sets an element's attribute (using DOM level 2) with the\n specified value and namespace prefix AND registers the ID value with\n the specified element. This is for resolving same-document\n ID references.\n\n @param elem the element to set the attribute on\n @param name the name of the attribute\n @param value the attribute value. If null, no attribute is set.\n","return_type":"void"},{"parameters":"Node:node","name":"getFirstChildElement","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the first child element of the specified node, or null if there\n is no such element.\n\n @param node the node\n @return the first child element of the specified node, or null if there\n    is no such element\n @throws NullPointerException if <code>node == null</code>\n","return_type":"Element"},{"parameters":"Node:node,String:localName","name":"getFirstChildElement","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the first child element of the specified node and checks that\n the local name is equal to {@code localName}.\n\n @param node the node\n @return the first child element of the specified node\n @throws NullPointerException if {@code node == null}\n @throws MarshalException if no such element or the local name is not\n    equal to {@code localName}\n","return_type":"Element"},{"parameters":"Element:elem,String:localName","name":"verifyElement","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Element"},{"parameters":"Node:node","name":"getLastChildElement","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the last child element of the specified node, or null if there\n is no such element.\n\n @param node the node\n @return the last child element of the specified node, or null if there\n    is no such element\n @throws NullPointerException if <code>node == null</code>\n","return_type":"Element"},{"parameters":"Node:node","name":"getNextSiblingElement","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the next sibling element of the specified node, or null if there\n is no such element.\n\n @param node the node\n @return the next sibling element of the specified node, or null if there\n    is no such element\n @throws NullPointerException if <code>node == null</code>\n","return_type":"Element"},{"parameters":"Node:node,String:localName","name":"getNextSiblingElement","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the next sibling element of the specified node and checks that\n the local name is equal to {@code localName}.\n\n @param node the node\n @return the next sibling element of the specified node\n @throws NullPointerException if {@code node == null}\n @throws MarshalException if no such element or the local name is not\n    equal to {@code localName}\n","return_type":"Element"},{"parameters":"Element:elem,String:name","name":"getAttributeValue","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the attribute value for the attribute with the specified name.\n Returns null if there is no such attribute, or\n the empty string if the attribute value is empty.\n\n <p>This works around a limitation of the DOM\n <code>Element.getAttributeNode</code> method, which does not distinguish\n between an unspecified attribute and an attribute with a value of\n \"\" (it returns \"\" for both cases).\n\n @param elem the element containing the attribute\n @param name the name of the attribute\n @return the attribute value (may be null if unspecified)\n","return_type":"String"},{"parameters":"NodeList:nl","name":"nodeSet","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns a Set of <code>Node</code>s, backed by the specified\n <code>NodeList</code>.\n\n @param nl the NodeList\n @return a Set of Nodes\n","return_type":"Set"},{"parameters":"XMLCryptoContext:context,String:nsURI","name":"getNSPrefix","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the prefix associated with the specified namespace URI\n\n @param context contains the namespace map\n @param nsURI the namespace URI\n @return the prefix associated with the specified namespace URI, or\n    null if not set\n","return_type":"String"},{"parameters":"XMLCryptoContext:context","name":"getSignaturePrefix","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the prefix associated with the XML Signature namespace URI\n\n @param context contains the namespace map\n @return the prefix associated with the specified namespace URI, or\n    null if not set\n","return_type":"String"},{"parameters":"Node:node","name":"removeAllChildren","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Removes all children nodes from the specified node.\n\n @param node the parent node whose children are to be removed\n","return_type":"void"},{"parameters":"Node:thisNode,Node:otherNode","name":"nodesEqual","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Compares 2 nodes for equality. Implementation is not complete.\n","return_type":"boolean"},{"parameters":"Node:parent,Node:child","name":"appendChild","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Checks if child element has same owner document before\n appending to the parent, and imports it to the parent's document\n if necessary.\n","return_type":"void"},{"parameters":"AlgorithmParameterSpec:spec1,AlgorithmParameterSpec:spec2","name":"paramsEqual","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"XPathFilter2ParameterSpec:spec1,XPathFilter2ParameterSpec:spec2","name":"paramsEqual","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"ExcC14NParameterSpec:spec1,ExcC14NParameterSpec:spec2","name":"paramsEqual","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"XPathFilterParameterSpec:spec1,XPathFilterParameterSpec:spec2","name":"paramsEqual","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"XSLTTransformParameterSpec:spec1,XSLTTransformParameterSpec:spec2","name":"paramsEqual","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"}],"fields":[],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Useful static DOM utility methods.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMUtils.NodeSet","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"NodeList:nl","name":"NodeSet","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"size","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":null,"name":"iterator","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Iterator"}],"fields":[{"parameters":null,"name":"nl","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMURIDereferencer","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMURIDereferencer","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"URIReference:uriRef,XMLCryptoContext:context","name":"dereference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"}],"fields":[{"parameters":null,"name":"INSTANCE","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of URIDereferencer.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMTransform","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"TransformService:spi","name":"DOMTransform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMTransform</code>.\n\n @param spi the TransformService\n","return_type":null},{"parameters":"Element:transElem,XMLCryptoContext:context,Provider:provider","name":"DOMTransform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMTransform</code> from an element. This constructor\n invokes the abstract {@link #unmarshalParams unmarshalParams} method to\n unmarshal any algorithm-specific input parameters.\n\n @param transElem a Transform element\n","return_type":null}],"methods":[{"parameters":null,"name":"getParameterSpec","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AlgorithmParameterSpec"},{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" This method invokes the abstract {@link #marshalParams marshalParams}\n method to marshal any algorithm-specific parameters.\n","return_type":"void"},{"parameters":"Data:data,XMLCryptoContext:xc","name":"transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Transforms the specified data using the underlying transform algorithm.\n\n @param data the data to be transformed\n @param sc the <code>XMLCryptoContext</code> containing\n    additional context (may be <code>null</code> if not applicable)\n @return the transformed data\n @throws NullPointerException if <code>data</code> is <code>null</code>\n @throws XMLSignatureException if an unexpected error occurs while\n    executing the transform\n","return_type":"Data"},{"parameters":"Data:data,XMLCryptoContext:xc,OutputStream:os","name":"transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Transforms the specified data using the underlying transform algorithm.\n\n @param data the data to be transformed\n @param sc the <code>XMLCryptoContext</code> containing\n    additional context (may be <code>null</code> if not applicable)\n @param os the <code>OutputStream</code> that should be used to write\n    the transformed data to\n @return the transformed data\n @throws NullPointerException if <code>data</code> is <code>null</code>\n @throws XMLSignatureException if an unexpected error occurs while\n    executing the transform\n","return_type":"Data"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":"Data:data,XMLCryptoContext:xc,DOMSignContext:context","name":"transform","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Transforms the specified data using the underlying transform algorithm.\n This method invokes the {@link #marshal marshal} method and passes it\n the specified <code>DOMSignContext</code> before transforming the data.\n\n @param data the data to be transformed\n @param sc the <code>XMLCryptoContext</code> containing\n    additional context (may be <code>null</code> if not applicable)\n @param context the marshalling context\n @return the transformed data\n @throws MarshalException if an exception occurs while marshalling\n @throws NullPointerException if <code>data</code> or <code>context</code>\n    is <code>null</code>\n @throws XMLSignatureException if an unexpected error occurs while\n    executing the transform\n","return_type":"Data"}],"fields":[{"parameters":null,"name":"spi","modifier":"protected","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based abstract implementation of Transform.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSubTreeData","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"Node:root,boolean:excludeComments","name":"DOMSubTreeData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"iterator","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Iterator"},{"parameters":null,"name":"getRoot","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Node"},{"parameters":null,"name":"excludeComments","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"}],"fields":[{"parameters":null,"name":"excludeComments","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"root","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" This is a subtype of NodeSetData that represents a dereferenced\n same-document URI as the root of a subdocument. The main reason is\n for efficiency and performance, as some transforms can operate\n directly on the subdocument and there is no need to convert it\n first to an XPath node-set.\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSubTreeData.DelayedNodeIterator","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"Node:root,boolean:excludeComments","name":"DelayedNodeIterator","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"hasNext","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"next","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Node"},{"parameters":null,"name":"remove","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Node:node","name":"dereferenceSameDocumentURI","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Dereferences a same-document URI fragment.\n\n @param node the node (document or element) referenced by the\n        URI fragment. If null, returns an empty set.\n @return a set of nodes (minus any comment nodes)\n","return_type":"List"},{"parameters":"Node:node,java.util.List:nodeSet,Node:prevSibling","name":"nodeSetMinusCommentNodes","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Recursively traverses the subtree, and returns an XPath-equivalent\n node-set of all nodes traversed, excluding any comment nodes,\n if specified.\n\n @param node the node to traverse\n @param nodeSet the set of nodes traversed so far\n @param the previous sibling node\n","return_type":"void"}],"fields":[{"parameters":null,"name":"root","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"nodeSet","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"li","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"withComments","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" This is an Iterator that contains a backing node-set that is\n not populated until the caller first attempts to advance the iterator.\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMStructure","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMStructure","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"String:feature","name":"isFeatureSupported","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[],"abstract":true,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based abstract implementation of XMLStructure.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignedInfo","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"CanonicalizationMethod:cm,SignatureMethod:sm,java.util.List:references","name":"DOMSignedInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMSignedInfo</code> from the specified parameters. Use\n this constructor when the <code>Id</code> is not specified.\n\n @param cm the canonicalization method\n @param sm the signature method\n @param references the list of references. The list is copied.\n @throws NullPointerException if\n    <code>cm</code>, <code>sm</code>, or <code>references</code> is\n    <code>null</code>\n @throws IllegalArgumentException if <code>references</code> is empty\n @throws ClassCastException if any of the references are not of\n    type <code>Reference</code>\n","return_type":null},{"parameters":"CanonicalizationMethod:cm,SignatureMethod:sm,java.util.List:references,String:id","name":"DOMSignedInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMSignedInfo</code> from the specified parameters.\n\n @param cm the canonicalization method\n @param sm the signature method\n @param references the list of references. The list is copied.\n @param id an optional identifer that will allow this\n    <code>SignedInfo</code> to be referenced by other signatures and\n    objects\n @throws NullPointerException if <code>cm</code>, <code>sm</code>,\n    or <code>references</code> is <code>null</code>\n @throws IllegalArgumentException if <code>references</code> is empty\n @throws ClassCastException if any of the references are not of\n    type <code>Reference</code>\n","return_type":null},{"parameters":"Element:siElem,XMLCryptoContext:context,Provider:provider","name":"DOMSignedInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMSignedInfo</code> from an element.\n\n @param siElem a SignedInfo element\n","return_type":null}],"methods":[{"parameters":null,"name":"getCanonicalizationMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"CanonicalizationMethod"},{"parameters":null,"name":"getSignatureMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"SignatureMethod"},{"parameters":null,"name":"getId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getReferences","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":null,"name":"getCanonicalizedData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"InputStream"},{"parameters":"XMLCryptoContext:context,ByteArrayOutputStream:bos","name":"canonicalize","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[{"parameters":null,"name":"MAXIMUM_REFERENCE_COUNT","modifier":"public","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" The maximum number of references per Manifest, if secure validation is enabled.\n","return_type":null},{"parameters":null,"name":"log","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5","modifier":"private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"Signature - NOT Recommended RSAwithMD5 ","return_type":null},{"parameters":null,"name":"ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5","modifier":"private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"HMAC - NOT Recommended HMAC-MD5 ","return_type":null},{"parameters":null,"name":"references","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"canonicalizationMethod","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"signatureMethod","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"id","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ownerDoc","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"localSiElem","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"canonData","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of SignedInfo.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureProperty","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"java.util.List:content,String:target,String:id","name":"DOMSignatureProperty","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>SignatureProperty</code> from the specified parameters.\n\n @param content a list of one or more {@link XMLStructure}s. The list\n    is defensively copied to protect against subsequent modification.\n @param target the target URI\n @param id the Id (may be <code>null</code>)\n @return a <code>SignatureProperty</code>\n @throws ClassCastException if <code>content</code> contains any\n    entries that are not of type {@link XMLStructure}\n @throws IllegalArgumentException if <code>content</code> is empty\n @throws NullPointerException if <code>content</code> or\n    <code>target</code> is <code>null</code>\n","return_type":null},{"parameters":"Element:propElem,XMLCryptoContext:context","name":"DOMSignatureProperty","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMSignatureProperty</code> from an element.\n\n @param propElem a SignatureProperty element\n","return_type":null}],"methods":[{"parameters":null,"name":"getContent","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":null,"name":"getId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getTarget","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":"java.util.List:otherContent","name":"equalsContent","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"}],"fields":[{"parameters":null,"name":"id","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"target","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"content","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of SignatureProperty.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureProperties","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"java.util.List:properties,String:id","name":"DOMSignatureProperties","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMSignatureProperties</code> from the specified\n parameters.\n\n @param properties a list of one or more {@link SignatureProperty}s. The\n    list is defensively copied to protect against subsequent modification.\n @param id the Id (may be <code>null</code>)\n @return a <code>DOMSignatureProperties</code>\n @throws ClassCastException if <code>properties</code> contains any\n    entries that are not of type {@link SignatureProperty}\n @throws IllegalArgumentException if <code>properties</code> is empty\n @throws NullPointerException if <code>properties</code>\n","return_type":null},{"parameters":"Element:propsElem,XMLCryptoContext:context","name":"DOMSignatureProperties","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMSignatureProperties</code> from an element.\n\n @param propsElem a SignatureProperties element\n @throws MarshalException if a marshalling error occurs\n","return_type":null}],"methods":[{"parameters":null,"name":"getProperties","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":null,"name":"getId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[{"parameters":null,"name":"id","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"properties","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of SignatureProperties.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"DOMSignatureMethod","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMSignatureMethod</code>.\n\n @param params the algorithm-specific params (may be <code>null</code>)\n @throws InvalidAlgorithmParameterException if the parameters are not\n    appropriate for this signature method\n","return_type":null},{"parameters":"Element:smElem","name":"DOMSignatureMethod","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMSignatureMethod</code> from an element. This ctor\n invokes the {@link #unmarshalParams unmarshalParams} method to\n unmarshal any algorithm-specific input parameters.\n\n @param smElem a SignatureMethod element\n","return_type":null}],"methods":[{"parameters":"Element:smElem","name":"unmarshal","modifier":"package-private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"SignatureMethod"},{"parameters":null,"name":"getParameterSpec","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AlgorithmParameterSpec"},{"parameters":"Key:key,SignedInfo:si,byte[]:sig,XMLValidateContext:context","name":"verify","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"Key:key,SignedInfo:si,XMLSignContext:context","name":"sign","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"byte"},{"parameters":"byte[]:asn1Bytes","name":"convertASN1toXMLDSIG","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Converts an ASN.1 DSA value to a XML Signature DSA Value.\n\n The JAVA JCE DSA Signature algorithm creates ASN.1 encoded (r,s) value\n pairs; the XML Signature requires the core BigInteger values.\n\n @param asn1Bytes\n\n @throws IOException\n @see <A HREF=\"http://www.w3.org/TR/xmldsig-core/#dsa-sha1\">6.4.1 DSA</A>\n","return_type":"byte"},{"parameters":"byte[]:xmldsigBytes","name":"convertXMLDSIGtoASN1","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Converts a XML Signature DSA Value to an ASN.1 DSA value.\n\n The JAVA JCE DSA Signature algorithm creates ASN.1 encoded (r,s) value\n pairs; the XML Signature requires the core BigInteger values.\n\n @param xmldsigBytes\n\n @throws IOException\n @see <A HREF=\"http://www.w3.org/TR/xmldsig-core/#dsa-sha1\">6.4.1 DSA</A>\n","return_type":"byte"}],"fields":[{"parameters":null,"name":"log","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"params","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"signature","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"RSA_SHA256","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"RSA_SHA384","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"RSA_SHA512","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ECDSA_SHA1","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ECDSA_SHA256","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ECDSA_SHA384","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ECDSA_SHA512","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":true,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based abstract implementation of SignatureMethod.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod.SHA1withRSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA1withRSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA1withRSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod.SHA256withRSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA256withRSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA256withRSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod.SHA384withRSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA384withRSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA384withRSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod.SHA512withRSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA512withRSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA512withRSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod.SHA1withDSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA1withDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA1withDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod.SHA1withECDSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA1withECDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA1withECDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod.SHA256withECDSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA256withECDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA256withECDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod.SHA384withECDSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA384withECDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA384withECDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMSignatureMethod.SHA512withECDSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA512withECDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA512withECDSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMRetrievalMethod","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"String:uri,String:type,java.util.List:transforms","name":"DOMRetrievalMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMRetrievalMethod</code> containing the specified\n URIReference and List of Transforms.\n\n @param uri the URI\n @param type the type\n @param transforms a list of {@link Transform}s. The list is defensively\n    copied to prevent subsequent modification. May be <code>null</code>\n    or empty.\n @throws IllegalArgumentException if the format of <code>uri</code> is\n    invalid, as specified by Reference's URI attribute in the W3C\n    specification for XML-Signature Syntax and Processing\n @throws NullPointerException if <code>uriReference</code>\n    is <code>null</code>\n @throws ClassCastException if <code>transforms</code> contains any\n    entries that are not of type {@link Transform}\n","return_type":null},{"parameters":"Element:rmElem,XMLCryptoContext:context,Provider:provider","name":"DOMRetrievalMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMRetrievalMethod</code> from an element.\n\n @param rmElem a RetrievalMethod element\n","return_type":null}],"methods":[{"parameters":null,"name":"getURI","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getType","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getTransforms","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":null,"name":"getHere","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Node"},{"parameters":"XMLCryptoContext:context","name":"dereference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":"XMLCryptoContext:context","name":"dereferenceAsXMLStructure","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLStructure"},{"parameters":"Object:obj","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[{"parameters":null,"name":"transforms","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"uri","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"type","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"here","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of RetrievalMethod.\n\n @author Sean Mullan\n @author Joyce Leung\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMReference","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"String:uri,String:type,DigestMethod:dm,java.util.List:transforms,String:id,Provider:provider","name":"DOMReference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>Reference</code> from the specified parameters.\n\n @param uri the URI (may be null)\n @param type the type (may be null)\n @param dm the digest method\n @param transforms a list of {@link Transform}s. The list\n    is defensively copied to protect against subsequent modification.\n    May be <code>null</code> or empty.\n @param id the reference ID (may be <code>null</code>)\n @return a <code>Reference</code>\n @throws NullPointerException if <code>dm</code> is <code>null</code>\n @throws ClassCastException if any of the <code>transforms</code> are\n    not of type <code>Transform</code>\n","return_type":null},{"parameters":"String:uri,String:type,DigestMethod:dm,java.util.List:appliedTransforms,Data:result,java.util.List:transforms,String:id,Provider:provider","name":"DOMReference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"String:uri,String:type,DigestMethod:dm,java.util.List:appliedTransforms,Data:result,java.util.List:transforms,String:id,byte[]:digestValue,Provider:provider","name":"DOMReference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:refElem,XMLCryptoContext:context,Provider:provider","name":"DOMReference","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMReference</code> from an element.\n\n @param refElem a Reference element\n","return_type":null}],"methods":[{"parameters":null,"name":"getDigestMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"DigestMethod"},{"parameters":null,"name":"getId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getURI","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getType","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getTransforms","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":null,"name":"getDigestValue","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"byte"},{"parameters":null,"name":"getCalculatedDigestValue","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"byte"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLSignContext:signContext","name":"digest","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLValidateContext:validateContext","name":"validate","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"getDereferencedData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":null,"name":"getDigestInputStream","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"InputStream"},{"parameters":"XMLCryptoContext:context","name":"dereference","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":"Data:dereferencedData,XMLCryptoContext:context","name":"transform","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"byte"},{"parameters":null,"name":"getHere","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Node"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":null,"name":"isDigested","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"Data:dereferencedData","name":"copyDerefData","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"}],"fields":[{"parameters":null,"name":"MAXIMUM_TRANSFORM_COUNT","modifier":"public","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" The maximum number of transforms per reference, if secure validation is enabled.\n","return_type":null},{"parameters":null,"name":"useC14N11","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Look up useC14N11 system property. If true, an explicit C14N11 transform\n will be added if necessary when generating the signature. See section\n 3.1.1 of http://www.w3.org/2007/xmlsec/Drafts/xmldsig-core/ for more info.\n\n If true, overrides the same property if set in the XMLSignContext.\n","return_type":null},{"parameters":null,"name":"log","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"digestMethod","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"id","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"transforms","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"allTransforms","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"appliedTransformData","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"here","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"uri","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"type","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"digestValue","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"calcDigestValue","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"refElem","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"digested","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"validated","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"validationStatus","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"derefData","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"dis","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"md","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"provider","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of Reference.\n\n @author Sean Mullan\n @author Joyce Leung\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMPGPData","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"byte[]:keyPacket,java.util.List:other","name":"DOMPGPData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMPGPData</code> containing the specified key packet.\n and optional list of external elements.\n\n @param keyPacket a PGP Key Material Packet as defined in section 5.5 of\n    <a href=\"http://www.ietf.org/rfc/rfc2440.txt\"/>RFC 2440</a>. The\n    array is cloned to prevent subsequent modification.\n @param other a list of {@link XMLStructure}s representing elements from\n    an external namespace. The list is defensively copied to prevent\n    subsequent modification. May be <code>null</code> or empty.\n @throws NullPointerException if <code>keyPacket</code> is\n    <code>null</code>\n @throws IllegalArgumentException if the key packet is not in the\n    correct format\n @throws ClassCastException if <code>other</code> contains any\n    entries that are not of type {@link XMLStructure}\n","return_type":null},{"parameters":"byte[]:keyId,byte[]:keyPacket,java.util.List:other","name":"DOMPGPData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMPGPData</code> containing the specified key id and\n optional key packet and list of external elements.\n\n @param keyId a PGP public key id as defined in section 11.2 of\n    <a href=\"http://www.ietf.org/rfc/rfc2440.txt\"/>RFC 2440</a>. The\n    array is cloned to prevent subsequent modification.\n @param keyPacket a PGP Key Material Packet as defined in section 5.5 of\n    <a href=\"http://www.ietf.org/rfc/rfc2440.txt\"/>RFC 2440</a> (may\n    be <code>null</code>). The array is cloned to prevent subsequent\n    modification.\n @param other a list of {@link XMLStructure}s representing elements from\n    an external namespace. The list is defensively copied to prevent\n    subsequent modification. May be <code>null</code> or empty.\n @throws NullPointerException if <code>keyId</code> is <code>null</code>\n @throws IllegalArgumentException if the key id or packet is not in the\n    correct format\n @throws ClassCastException if <code>other</code> contains any\n    entries that are not of type {@link XMLStructure}\n","return_type":null},{"parameters":"Element:pdElem","name":"DOMPGPData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMPGPData</code> from an element.\n\n @param pdElem a PGPData element\n","return_type":null}],"methods":[{"parameters":null,"name":"getKeyId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"byte"},{"parameters":null,"name":"getKeyPacket","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"byte"},{"parameters":null,"name":"getExternalElements","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"byte[]:keyPacket","name":"checkKeyPacket","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" We assume packets use the new format packet syntax, as specified in\n section 4 of RFC 2440.\n\n This method only checks if the packet contains a valid tag. The\n contents of the packet should be checked by the application.\n","return_type":"void"}],"fields":[{"parameters":null,"name":"keyId","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"keyPacket","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"externalElements","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of PGPData.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMManifest","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"java.util.List:references,String:id","name":"DOMManifest","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMManifest</code> containing the specified\n list of {@link Reference}s and optional id.\n\n @param references a list of one or more <code>Reference</code>s. The list\n    is defensively copied to protect against subsequent modification.\n @param id the id (may be <code>null</code>\n @throws NullPointerException if <code>references</code> is\n    <code>null</code>\n @throws IllegalArgumentException if <code>references</code> is empty\n @throws ClassCastException if <code>references</code> contains any\n    entries that are not of type {@link Reference}\n","return_type":null},{"parameters":"Element:manElem,XMLCryptoContext:context,Provider:provider","name":"DOMManifest","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMManifest</code> from an element.\n\n @param manElem a Manifest element\n","return_type":null}],"methods":[{"parameters":null,"name":"getId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getReferences","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[{"parameters":null,"name":"references","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"id","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of Manifest.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMKeyValue","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"PublicKey:key","name":"DOMKeyValue","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:kvtElem","name":"DOMKeyValue","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMKeyValue</code> from an element.\n\n @param kvtElem a KeyValue child element\n","return_type":null}],"methods":[{"parameters":"Element:kvElem","name":"unmarshal","modifier":"package-private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"KeyValue"},{"parameters":null,"name":"getPublicKey","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PublicKey"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Node:parent,Document:doc,String:dsPrefix,DOMCryptoContext:context","name":"marshalPublicKey","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Element:kvtElem","name":"unmarshalKeyValue","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PublicKey"},{"parameters":"KeyFactory:kf,KeySpec:keyspec","name":"generatePublicKey","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PublicKey"},{"parameters":"Object:obj","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[{"parameters":null,"name":"XMLDSIG_11_XMLNS","modifier":"private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"publicKey","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":true,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of KeyValue.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMKeyValue.RSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"PublicKey:key","name":"RSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:elem","name":"RSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"Node:parent,Document:doc,String:dsPrefix,DOMCryptoContext:context","name":"marshalPublicKey","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Element:kvtElem","name":"unmarshalKeyValue","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PublicKey"}],"fields":[{"parameters":null,"name":"modulus","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"exponent","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"rsakf","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMKeyValue.DSA","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"PublicKey:key","name":"DSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:elem","name":"DSA","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"Node:parent,Document:doc,String:dsPrefix,DOMCryptoContext:context","name":"marshalPublicKey","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Element:kvtElem","name":"unmarshalKeyValue","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PublicKey"}],"fields":[{"parameters":null,"name":"p","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"q","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"g","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"y","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"j","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"dsakf","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMKeyValue.EC","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"PublicKey:key","name":"EC","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"EC","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getMethods","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Node:parent,Document:doc,String:dsPrefix,DOMCryptoContext:context","name":"marshalPublicKey","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Element:kvtElem","name":"unmarshalKeyValue","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PublicKey"}],"fields":[{"parameters":null,"name":"ecPublicKey","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"eckf","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ecParams","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"encodePoint","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"decodePoint","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"getCurveName","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"getECParameterSpec","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMKeyValue.Unknown","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"Element:elem","name":"Unknown","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"Element:kvElem","name":"unmarshalKeyValue","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PublicKey"},{"parameters":"Node:parent,Document:doc,String:dsPrefix,DOMCryptoContext:context","name":"marshalPublicKey","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[{"parameters":null,"name":"externalPublicKey","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMKeyName","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"String:name","name":"DOMKeyName","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMKeyName</code>.\n\n @param name the name of the key identifier\n @throws NullPointerException if <code>name</code> is null\n","return_type":null},{"parameters":"Element:knElem","name":"DOMKeyName","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMKeyName</code> from a KeyName element.\n\n @param knElem a KeyName element\n","return_type":null}],"methods":[{"parameters":null,"name":"getName","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Object:obj","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[{"parameters":null,"name":"name","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of KeyName.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMKeyInfoFactory","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMKeyInfoFactory","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"java.util.List:content","name":"newKeyInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"KeyInfo"},{"parameters":"java.util.List:content,String:id","name":"newKeyInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"KeyInfo"},{"parameters":"String:name","name":"newKeyName","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"KeyName"},{"parameters":"PublicKey:key","name":"newKeyValue","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"KeyValue"},{"parameters":"byte[]:keyId","name":"newPGPData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PGPData"},{"parameters":"byte[]:keyId,byte[]:keyPacket,java.util.List:other","name":"newPGPData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PGPData"},{"parameters":"byte[]:keyPacket,java.util.List:other","name":"newPGPData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"PGPData"},{"parameters":"String:uri","name":"newRetrievalMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"RetrievalMethod"},{"parameters":"String:uri,String:type,java.util.List:transforms","name":"newRetrievalMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"RetrievalMethod"},{"parameters":"java.util.List:content","name":"newX509Data","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"X509Data"},{"parameters":"String:issuerName,BigInteger:serialNumber","name":"newX509IssuerSerial","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"X509IssuerSerial"},{"parameters":"String:feature","name":"isFeatureSupported","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"getURIDereferencer","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"URIDereferencer"},{"parameters":"XMLStructure:xmlStructure","name":"unmarshalKeyInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"KeyInfo"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of KeyInfoFactory.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMKeyInfoFactory.UnmarshalContext","modifier":"private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"UnmarshalContext","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[],"fields":[],"abstract":false,"static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMKeyInfo","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"java.util.List:content,String:id","name":"DOMKeyInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMKeyInfo</code>.\n\n @param content a list of one or more {@link XMLStructure}s representing\n    key information types. The list is defensively copied to protect\n    against subsequent modification.\n @param id an ID attribute\n @throws NullPointerException if <code>content</code> is <code>null</code>\n @throws IllegalArgumentException if <code>content</code> is empty\n @throws ClassCastException if <code>content</code> contains any entries\n    that are not of type {@link XMLStructure}\n","return_type":null},{"parameters":"Element:kiElem,XMLCryptoContext:context,Provider:provider","name":"DOMKeyInfo","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMKeyInfo</code> from XML.\n\n @param kiElem KeyInfo element\n","return_type":null}],"methods":[{"parameters":null,"name":"getId","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getContent","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"List"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Node:parent,Node:nextSibling,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Node:parent,Element:kiElem,Node:nextSibling,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[{"parameters":null,"name":"id","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"keyInfoTypes","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of KeyInfo.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMHMACSignatureMethod","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"DOMHMACSignatureMethod","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMHMACSignatureMethod</code> with the specified params\n\n @param params algorithm-specific parameters (may be <code>null</code>)\n @throws InvalidAlgorithmParameterException if params are inappropriate\n","return_type":null},{"parameters":"Element:smElem","name":"DOMHMACSignatureMethod","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMHMACSignatureMethod</code> from an element.\n\n @param smElem a SignatureMethod element\n","return_type":null}],"methods":[{"parameters":"SignatureMethodParameterSpec:params","name":"checkParams","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":null,"name":"getParameterSpec","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AlgorithmParameterSpec"},{"parameters":"Element:paramsElem","name":"unmarshalParams","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"SignatureMethodParameterSpec"},{"parameters":"Element:parent,String:prefix","name":"marshalParams","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Key:key,SignedInfo:si,byte[]:sig,XMLValidateContext:context","name":"verify","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":"Key:key,SignedInfo:si,XMLSignContext:context","name":"sign","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"byte"},{"parameters":"AlgorithmParameterSpec:spec","name":"paramsEqual","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"},{"parameters":null,"name":"getDigestLength","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the output length of the hash/digest.\n","return_type":"int"}],"fields":[{"parameters":null,"name":"log","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"HMAC_SHA256","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"HMAC_SHA384","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"HMAC_SHA512","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"hmac","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"outputLength","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"outputLengthSet","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"params","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":true,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of HMAC SignatureMethod.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMHMACSignatureMethod.SHA1","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA1","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA1","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getDigestLength","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMHMACSignatureMethod.SHA256","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA256","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA256","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getDigestLength","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMHMACSignatureMethod.SHA384","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA384","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA384","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getDigestLength","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMHMACSignatureMethod.SHA512","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA512","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA512","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getDigestLength","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMExcC14NMethod","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMExcC14NMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"TransformParameterSpec:params","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Element:paramsElem","name":"unmarshalParams","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"marshalParams","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":null,"name":"getParamsNSURI","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":"Data:data,XMLCryptoContext:xc","name":"transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of CanonicalizationMethod for Exclusive\n Canonical XML algorithm (with or without comments).\n Uses Apache XML-Sec Canonicalizer.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMEnvelopedTransform","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMEnvelopedTransform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"TransformParameterSpec:params","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of Enveloped Signature Transform.\n (Uses Apache XML-Sec Transform implementation)\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMDigestMethod","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"DOMDigestMethod","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMDigestMethod</code>.\n\n @param params the algorithm-specific params (may be <code>null</code>)\n @throws InvalidAlgorithmParameterException if the parameters are not\n    appropriate for this digest method\n","return_type":null},{"parameters":"Element:dmElem","name":"DOMDigestMethod","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMDigestMethod</code> from an element. This constructor\n invokes the abstract {@link #unmarshalParams unmarshalParams} method to\n unmarshal any algorithm-specific input parameters.\n\n @param dmElem a DigestMethod element\n","return_type":null}],"methods":[{"parameters":"Element:dmElem","name":"unmarshal","modifier":"package-private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"DigestMethod"},{"parameters":"DigestMethodParameterSpec:params","name":"checkParams","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Checks if the specified parameters are valid for this algorithm. By\n default, this method throws an exception if parameters are specified\n since most DigestMethod algorithms do not have parameters. Subclasses\n should override it if they have parameters.\n\n @param params the algorithm-specific params (may be <code>null</code>)\n @throws InvalidAlgorithmParameterException if the parameters are not\n    appropriate for this digest method\n","return_type":"void"},{"parameters":null,"name":"getParameterSpec","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AlgorithmParameterSpec"},{"parameters":"Element:paramsElem","name":"unmarshalParams","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Unmarshals <code>DigestMethodParameterSpec</code> from the specified\n <code>Element</code>.  By default, this method throws an exception since\n most DigestMethod algorithms do not have parameters. Subclasses should\n override it if they have parameters.\n\n @param paramsElem the <code>Element</code> holding the input params\n @return the algorithm-specific <code>DigestMethodParameterSpec</code>\n @throws MarshalException if the parameters cannot be unmarshalled\n","return_type":"DigestMethodParameterSpec"},{"parameters":"Node:parent,String:prefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" This method invokes the abstract {@link #marshalParams marshalParams}\n method to marshal any algorithm-specific parameters.\n","return_type":"void"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":"Element:parent,String:prefix","name":"marshalParams","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Marshals the algorithm-specific parameters to an Element and\n appends it to the specified parent element. By default, this method\n throws an exception since most DigestMethod algorithms do not have\n parameters. Subclasses should override it if they have parameters.\n\n @param parent the parent element to append the parameters to\n @param the namespace prefix to use\n @throws MarshalException if the parameters cannot be marshalled\n","return_type":"void"},{"parameters":null,"name":"getMessageDigestAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the MessageDigest standard algorithm name.\n","return_type":"String"}],"fields":[{"parameters":null,"name":"SHA384","modifier":"package-private","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"params","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":true,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based abstract implementation of DigestMethod.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMDigestMethod.SHA1","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA1","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA1","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getMessageDigestAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMDigestMethod.SHA256","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA256","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA256","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getMessageDigestAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMDigestMethod.SHA384","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA384","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA384","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getMessageDigestAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMDigestMethod.SHA512","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"AlgorithmParameterSpec:params","name":"SHA512","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":"Element:dmElem","name":"SHA512","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getAlgorithm","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"},{"parameters":null,"name":"getMessageDigestAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"String"}],"fields":[],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMCryptoBinary","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"BigInteger:bigNum","name":"DOMCryptoBinary","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Create a <code>DOMCryptoBinary</code> instance from the specified\n <code>BigInteger</code>\n\n @param bigNum the arbitrary-length integer\n @throws NullPointerException if <code>bigNum</code> is <code>null</code>\n","return_type":null},{"parameters":"Node:cbNode","name":"DOMCryptoBinary","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMCryptoBinary</code> from a node.\n\n @param cbNode a CryptoBinary text node\n @throws MarshalException if value cannot be decoded (invalid format)\n","return_type":null}],"methods":[{"parameters":null,"name":"getBigNum","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the <code>BigInteger</code> that this object contains.\n\n @return the <code>BigInteger</code> that this object contains\n","return_type":"BigInteger"},{"parameters":"Node:parent,String:prefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[{"parameters":null,"name":"bigNum","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"value","modifier":"private","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" A DOM-based representation of the XML <code>CryptoBinary</code> simple type\n as defined in the W3C specification for XML-Signature Syntax and Processing.\n The XML Schema Definition is defined as:\n\n <xmp>\n <simpleType name=\"CryptoBinary\">\n   <restriction base = \"base64Binary\">\n   </restriction>\n </simpleType>\n </xmp>\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMCanonicalizationMethod","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"TransformService:spi","name":"DOMCanonicalizationMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMCanonicalizationMethod</code>.\n\n @param spi TransformService\n","return_type":null},{"parameters":"Element:cmElem,XMLCryptoContext:context,Provider:provider","name":"DOMCanonicalizationMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Creates a <code>DOMCanonicalizationMethod</code> from an element. This\n ctor invokes the abstract {@link #unmarshalParams unmarshalParams}\n method to unmarshal any algorithm-specific input parameters.\n\n @param cmElem a CanonicalizationMethod element\n","return_type":null}],"methods":[{"parameters":"Data:data,XMLCryptoContext:xc","name":"canonicalize","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Canonicalizes the specified data using the underlying canonicalization\n algorithm. This is a convenience method that is equivalent to invoking\n the {@link #transform transform} method.\n\n @param data the data to be canonicalized\n @param xc the <code>XMLCryptoContext</code> containing\n     additional context (may be <code>null</code> if not applicable)\n @return the canonicalized data\n @throws NullPointerException if <code>data</code> is <code>null</code>\n @throws TransformException if an unexpected error occurs while\n    canonicalizing the data\n","return_type":"Data"},{"parameters":"Data:data,XMLCryptoContext:xc,OutputStream:os","name":"canonicalize","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":"String:alg","name":"isC14Nalg","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"}],"fields":[],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based abstract implementation of CanonicalizationMethod.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMCanonicalXMLC14NMethod","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMCanonicalXMLC14NMethod","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"TransformParameterSpec:params","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Data:data,XMLCryptoContext:xc","name":"transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of CanonicalizationMethod for Canonical XML\n (with or without comments). Uses Apache XML-Sec Canonicalizer.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMCanonicalXMLC14N11Method","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMCanonicalXMLC14N11Method","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"TransformParameterSpec:params","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Data:data,XMLCryptoContext:xc","name":"transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"}],"fields":[{"parameters":null,"name":"C14N_11","modifier":"public","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"C14N_11_WITH_COMMENTS","modifier":"public","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of CanonicalizationMethod for Canonical XML 1.1\n (with or without comments). Uses Apache XML-Sec Canonicalizer.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"DOMBase64Transform","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"DOMBase64Transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"TransformParameterSpec:params","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"}],"fields":[],"abstract":false,"static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":" DOM-based implementation of Base64 Encoding Transform.\n (Uses Apache XML-Sec Transform implementation)\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"ApacheTransform","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"ApacheTransform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getParameterSpec","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AlgorithmParameterSpec"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"marshalParams","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Data:data,XMLCryptoContext:xc","name":"transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":"Data:data,XMLCryptoContext:xc,OutputStream:os","name":"transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":"Data:data,XMLCryptoContext:xc,OutputStream:os","name":"transformIt","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":"String:feature","name":"isFeatureSupported","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"}],"fields":[{"parameters":null,"name":"log","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"apacheTransform","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ownerDoc","modifier":"protected","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"transformElem","modifier":"protected","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"params","modifier":"protected","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":true,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" This is a wrapper/glue class which invokes the Apache XML-Security\n Transform.\n\n @author Sean Mullan\n @author Erwin van der Koogh\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"ApacheOctetStreamData","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"XMLSignatureInput:xi","name":"ApacheOctetStreamData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getXMLSignatureInput","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLSignatureInput"}],"fields":[{"parameters":null,"name":"xi","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"ApacheNodeSetData","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"XMLSignatureInput:xi","name":"ApacheNodeSetData","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"iterator","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Iterator"},{"parameters":null,"name":"getXMLSignatureInput","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"XMLSignatureInput"},{"parameters":"java.util.List:nodeFilters","name":"getNodeSet","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Set"}],"fields":[{"parameters":null,"name":"xi","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"ApacheData","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[],"methods":[{"parameters":null,"name":"getXMLSignatureInput","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the XMLSignatureInput.\n","return_type":"XMLSignatureInput"}],"fields":[],"abstract":true,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" XMLSignatureInput Data wrapper.\n\n @author Sean Mullan\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"ApacheCanonicalizer","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"ApacheCanonicalizer","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getParameterSpec","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AlgorithmParameterSpec"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"init","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"XMLStructure:parent,XMLCryptoContext:context","name":"marshalParams","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"void"},{"parameters":"Data:data,XMLCryptoContext:xc","name":"canonicalize","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":"Data:data,XMLCryptoContext:xc,OutputStream:os","name":"canonicalize","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":"Data:data,XMLCryptoContext:xc,OutputStream:os","name":"transform","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"Data"},{"parameters":"String:feature","name":"isFeatureSupported","modifier":"public","static":false,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"}],"fields":[{"parameters":null,"name":"log","modifier":"private","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"apacheCanonicalizer","modifier":"protected","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"apacheTransform","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"inclusiveNamespaces","modifier":"protected","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"params","modifier":"protected","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ownerDoc","modifier":"protected","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"transformElem","modifier":"protected","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":true,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"AbstractDOMSignatureMethod","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"AbstractDOMSignatureMethod","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":"Key:key,SignedInfo:si,byte[]:sig,XMLValidateContext:context","name":"verify","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Verifies the passed-in signature with the specified key, using the\n underlying Signature or Mac algorithm.\n\n @param key the verification key\n @param si the SignedInfo\n @param sig the signature bytes to be verified\n @param context the XMLValidateContext\n @return <code>true</code> if the signature verified successfully,\n    <code>false</code> if not\n @throws NullPointerException if <code>key</code>, <code>si</code> or\n    <code>sig</code> are <code>null</code>\n @throws InvalidKeyException if the key is improperly encoded, of\n    the wrong type, or parameters are missing, etc\n @throws SignatureException if an unexpected error occurs, such\n    as the passed in signature is improperly encoded\n @throws XMLSignatureException if an unexpected error occurs\n","return_type":"boolean"},{"parameters":"Key:key,SignedInfo:si,XMLSignContext:context","name":"sign","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Signs the bytes with the specified key, using the underlying\n Signature or Mac algorithm.\n\n @param key the signing key\n @param si the SignedInfo\n @param context the XMLSignContext\n @return the signature\n @throws NullPointerException if <code>key</code> or\n    <code>si</code> are <code>null</code>\n @throws InvalidKeyException if the key is improperly encoded, of\n    the wrong type, or parameters are missing, etc\n @throws XMLSignatureException if an unexpected error occurs\n","return_type":"byte"},{"parameters":null,"name":"getJCAAlgorithm","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the java.security.Signature or javax.crypto.Mac standard\n algorithm name.\n","return_type":"String"},{"parameters":null,"name":"getAlgorithmType","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns the type of signature algorithm.\n","return_type":"AbstractDOMSignatureMethod.Type"},{"parameters":"Node:parent,String:dsPrefix,DOMCryptoContext:context","name":"marshal","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" This method invokes the {@link #marshalParams marshalParams}\n method to marshal any algorithm-specific parameters.\n","return_type":"void"},{"parameters":"Element:parent,String:paramsPrefix","name":"marshalParams","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Marshals the algorithm-specific parameters to an Element and\n appends it to the specified parent element. By default, this method\n throws an exception since most SignatureMethod algorithms do not have\n parameters. Subclasses should override it if they have parameters.\n\n @param parent the parent element to append the parameters to\n @param paramsPrefix the algorithm parameters prefix to use\n @throws MarshalException if the parameters cannot be marshalled\n","return_type":"void"},{"parameters":"Element:paramsElem","name":"unmarshalParams","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Unmarshals <code>SignatureMethodParameterSpec</code> from the specified\n <code>Element</code>. By default, this method throws an exception since\n most SignatureMethod algorithms do not have parameters. Subclasses should\n override it if they have parameters.\n\n @param paramsElem the <code>Element</code> holding the input params\n @return the algorithm-specific <code>SignatureMethodParameterSpec</code>\n @throws MarshalException if the parameters cannot be unmarshalled\n","return_type":"SignatureMethodParameterSpec"},{"parameters":"SignatureMethodParameterSpec:params","name":"checkParams","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Checks if the specified parameters are valid for this algorithm. By\n default, this method throws an exception if parameters are specified\n since most SignatureMethod algorithms do not have parameters. Subclasses\n should override it if they have parameters.\n\n @param params the algorithm-specific params (may be <code>null</code>)\n @throws InvalidAlgorithmParameterException if the parameters are not\n    appropriate for this signature method\n","return_type":"void"},{"parameters":"Object:o","name":"equals","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"int"},{"parameters":"AlgorithmParameterSpec:spec","name":"paramsEqual","modifier":"package-private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" Returns true if parameters are equal; false otherwise.\n\n Subclasses should override this method to compare algorithm-specific\n parameters.\n","return_type":"boolean"}],"fields":[],"abstract":true,"static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":" An abstract class representing a SignatureMethod. Subclasses implement\n a specific XML DSig signature algorithm.\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"AbstractDOMSignatureMethod.Type","modifier":"package-private","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"Type","modifier":"private","static":false,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"methods":[{"parameters":null,"name":"values","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"},{"parameters":"String:name","name":"valueOf","modifier":"public","static":true,"final":false,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":"AbstractDOMSignatureMethod.Type"}],"fields":[{"parameters":null,"name":"DSA","modifier":"public","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"RSA","modifier":"public","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"ECDSA","modifier":"public","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null},{"parameters":null,"name":"HMAC","modifier":"public","static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null}],"abstract":false,"static":true,"final":true,"package":"org.jcp.xml.dsig.internal.dom","description":"","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"Oid","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"String:strOid","name":"Oid","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Constructs an Oid object from a string representation of its\n integer components.\n\n @param strOid the dot separated string representation of the oid.\n For instance, \"1.2.840.113554.1.2.2\".\n @exception GSSException may be thrown when the string is incorrectly\n     formatted\n","return_type":null},{"parameters":"InputStream:derOid","name":"Oid","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Creates an Oid object from its ASN.1 DER encoding.  This refers to\n the full encoding including tag and length.  The structure and\n encoding of Oids is defined in ISOIEC-8824 and ISOIEC-8825.  This\n method is identical in functionality to its byte array counterpart.\n\n @param derOid stream containing the DER encoded oid\n @exception GSSException may be thrown when the DER encoding does not\n  follow the prescribed format.\n","return_type":null},{"parameters":"byte[]:data","name":"Oid","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Creates an Oid object from its ASN.1 DER encoding.  This refers to\n the full encoding including tag and length.  The structure and\n encoding of Oids is defined in ISOIEC-8824 and ISOIEC-8825.  This\n method is identical in functionality to its InputStream conterpart.\n\n @param data byte array containing the DER encoded oid\n @exception GSSException may be thrown when the DER encoding does not\n     follow the prescribed format.\n","return_type":null}],"methods":[{"parameters":"String:strOid","name":"getInstance","modifier":"package-private","static":true,"final":false,"package":"org.ietf.jgss","description":" Only for calling by initializators used with declarations.\n\n @param strOid\n","return_type":"Oid"},{"parameters":null,"name":"toString","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a string representation of the oid's integer components\n in dot separated notation.\n\n @return string representation in the following format: \"1.2.3.4.5\"\n","return_type":"String"},{"parameters":"Object:other","name":"equals","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Tests if two Oid objects represent the same Object identifier\n value.\n\n @return <code>true</code> if the two Oid objects represent the same\n value, <code>false</code> otherwise.\n @param other the Oid object that has to be compared to this one\n","return_type":"boolean"},{"parameters":null,"name":"getDER","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the full ASN.1 DER encoding for this oid object, which\n includes the tag and length.\n\n @return byte array containing the DER encoding of this oid object.\n @exception GSSException may be thrown when the oid can't be encoded\n","return_type":"byte"},{"parameters":"org.ietf.jgss.Oid[]:oids","name":"containedIn","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" A utility method to test if this Oid value is contained within the\n supplied Oid array.\n\n @param oids the array of Oid's to search\n @return true if the array contains this Oid value, false otherwise\n","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a hashcode value for this Oid.\n\n @return a hashCode value\n","return_type":"int"}],"fields":[{"parameters":null,"name":"oid","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"derEncoding","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.ietf.jgss","description":" This class represents Universal Object Identifiers (Oids) and their\n associated operations.<p>\n\n Oids are hierarchically globally-interpretable identifiers used\n within the GSS-API framework to identify mechanisms and name formats.<p>\n\n The structure and encoding of Oids is defined in ISOIEC-8824 and\n ISOIEC-8825.  For example the Oid representation of Kerberos V5\n mechanism is \"1.2.840.113554.1.2.2\"<p>\n\n The GSSName name class contains public static Oid objects\n representing the standard name types defined in GSS-API.\n\n @author Mayank Upadhyay\n @since 1.4\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"MessageProp","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"boolean:privState","name":"MessageProp","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Constructor which sets the desired privacy state. The QOP value used\n is 0.\n\n @param privState the privacy (i.e. confidentiality) state\n","return_type":null},{"parameters":"int:qop,boolean:privState","name":"MessageProp","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Constructor which sets the values for the qop and privacy state.\n\n @param qop the QOP value\n @param privState the privacy (i.e. confidentiality) state\n","return_type":null}],"methods":[{"parameters":null,"name":"getQOP","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Retrieves the QOP value.\n\n @return an int representing the QOP value\n @see #setQOP\n","return_type":"int"},{"parameters":null,"name":"getPrivacy","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Retrieves the privacy state.\n\n @return true if the privacy (i.e., confidentiality) state is true,\n false otherwise.\n @see #setPrivacy\n","return_type":"boolean"},{"parameters":"int:qop","name":"setQOP","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Sets the QOP value.\n\n @param qop the int value to set the QOP to\n @see #getQOP\n","return_type":"void"},{"parameters":"boolean:privState","name":"setPrivacy","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Sets the privacy state.\n\n @param privState true is the privacy (i.e., confidentiality) state\n is true, false otherwise.\n @see #getPrivacy\n","return_type":"void"},{"parameters":null,"name":"isDuplicateToken","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Tests if this is a duplicate of an earlier token.\n\n @return true if this is a duplicate, false otherwise.\n","return_type":"boolean"},{"parameters":null,"name":"isOldToken","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Tests if this token's validity period has expired, i.e., the token\n is too old to be checked for duplication.\n\n @return true if the token's validity period has expired, false\n otherwise.\n","return_type":"boolean"},{"parameters":null,"name":"isUnseqToken","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Tests if a later token had already been processed.\n\n @return true if a later token had already been processed, false otherwise.\n","return_type":"boolean"},{"parameters":null,"name":"isGapToken","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Tests if an expected token was not received, i.e., one or more\n predecessor tokens have not yet been successfully processed.\n\n @return true if an expected per-message token was not received,\n false otherwise.\n","return_type":"boolean"},{"parameters":null,"name":"getMinorStatus","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Retrieves the minor status code that the underlying mechanism might\n have set for this per-message operation.\n\n @return the int minor status\n","return_type":"int"},{"parameters":null,"name":"getMinorString","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Retrieves a string explaining the minor status code.\n\n @return a String corresponding to the minor status\n code. <code>null</code> will be returned when no minor status code\n has been set.\n","return_type":"String"},{"parameters":"boolean:duplicate,boolean:old,boolean:unseq,boolean:gap,int:minorStatus,String:minorString","name":"setSupplementaryStates","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" This method sets the state for the supplementary information flags\n and the minor status in MessageProp.  It is not used by the\n application but by the GSS implementation to return this information\n to the caller of a per-message context method.\n\n @param duplicate true if the token was a duplicate of an earlier\n token, false otherwise\n @param old true if the token's validity period has expired, false\n otherwise\n @param unseq true if a later token has already been processed, false\n otherwise\n @param gap true if one or more predecessor tokens have not yet been\n successfully processed, false otherwise\n @param minorStatus the int minor status code for the per-message\n operation\n @param  minorString the textual representation of the minorStatus value\n","return_type":"void"},{"parameters":null,"name":"resetStatusValues","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":" Resets the supplementary status values to false.\n","return_type":"void"}],"fields":[{"parameters":null,"name":"privacyState","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"qop","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"dupToken","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"oldToken","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"unseqToken","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"gapToken","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"minorStatus","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"minorString","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.ietf.jgss","description":" This is a utility class used within the per-message GSSContext\n methods to convey per-message properties.<p>\n\n When used with the GSSContext interface's wrap and getMIC methods, an\n instance of this class is used to indicate the desired\n Quality-of-Protection (QOP) and to request if confidentiality services\n are to be applied to caller supplied data (wrap only).  To request\n default QOP, the value of 0 should be used for QOP.<p>\n\n When used with the unwrap and verifyMIC methods of the GSSContext\n interface, an instance of this class will be used to indicate the\n applied QOP and confidentiality services over the supplied message.\n In the case of verifyMIC, the confidentiality state will always be\n <code>false</code>.  Upon return from these methods, this object will also\n contain any supplementary status values applicable to the processed\n token.  The supplementary status values can indicate old tokens, out\n of sequence tokens, gap tokens or duplicate tokens.<p>\n\n @see GSSContext#wrap\n @see GSSContext#unwrap\n @see GSSContext#getMIC\n @see GSSContext#verifyMIC\n\n @author Mayank Upadhyay\n @since 1.4\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"GSSName","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[],"methods":[{"parameters":"GSSName:another","name":"equals","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Compares two <code>GSSName</code> objects to determine if they refer to the\n same entity.\n\n @param another the <code>GSSName</code> to compare this name with\n @return true if the two names contain at least one primitive element\n in common. If either of the names represents an anonymous entity, the\n method will return false.\n\n @throws GSSException when the names cannot be compared, containing the following\n major error codes:\n         {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"boolean"},{"parameters":"Object:another","name":"equals","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Compares this <code>GSSName</code> object to another Object that might be a\n <code>GSSName</code>. The behaviour is exactly the same as in {@link\n #equals(GSSName) equals} except that no GSSException is thrown;\n instead, false will be returned in the situation where an error\n occurs.\n @return true if the object to compare to is also a <code>GSSName</code> and the two\n names refer to the same entity.\n @param another the object to compare this name to\n @see #equals(GSSName)\n","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a hashcode value for this GSSName.\n\n @return a hashCode value\n","return_type":"int"},{"parameters":"Oid:mech","name":"canonicalize","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Creates a name that is canonicalized for some\n mechanism.\n\n @return a <code>GSSName</code> that contains just one primitive\n element representing this name in a canonicalized form for the desired\n mechanism.\n @param mech the oid for the mechanism for which the canonical form of\n the name is requested.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n         {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n         {@link GSSException#BAD_NAME GSSException.BAD_NAME},\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSName"},{"parameters":null,"name":"export","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a canonical contiguous byte representation of a mechanism name\n (MN), suitable for direct, byte by byte comparison by authorization\n functions.  If the name is not an MN, implementations may throw a\n GSSException with the NAME_NOT_MN status code.  If an implementation\n chooses not to throw an exception, it should use some system specific\n default mechanism to canonicalize the name and then export\n it. Structurally, an exported name object consists of a header\n containing an OID identifying the mechanism that authenticated the\n name, and a trailer containing the name itself, where the syntax of\n the trailer is defined by the individual mechanism specification. The\n format of the header of the output buffer is specified in RFC 2743.<p>\n\n The exported name is useful when used in large access control lists\n where the overhead of creating a <code>GSSName</code> object on each\n name and invoking the equals method on each name from the ACL may be\n prohibitive.<p>\n\n Exported names may be re-imported by using the byte array factory\n method {@link GSSManager#createName(byte[], Oid)\n GSSManager.createName} and specifying the NT_EXPORT_NAME as the name\n type object identifier. The resulting <code>GSSName</code> name will\n also be a MN.<p>\n @return a byte[] containing the exported name. RFC 2743 defines the\n \"Mechanism-Independent Exported Name Object Format\" for these bytes.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#BAD_NAME GSSException.BAD_NAME},\n         {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"byte"},{"parameters":null,"name":"toString","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a textual representation of the <code>GSSName</code> object.  To retrieve\n the printed name format, which determines the syntax of the returned\n string, use the {@link #getStringNameType() getStringNameType}\n method.\n\n @return a String representing this name in printable form.\n","return_type":"String"},{"parameters":null,"name":"getStringNameType","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the name type of the printable\n representation of this name that can be obtained from the <code>\n toString</code> method.\n\n @return an Oid representing the namespace of the name returned\n from the toString method.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"Oid"},{"parameters":null,"name":"isAnonymous","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Tests if this name object represents an anonymous entity.\n\n @return true if this is an anonymous name, false otherwise.\n","return_type":"boolean"},{"parameters":null,"name":"isMN","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Tests if this name object represents a Mechanism Name (MN). An MN is\n a GSSName the contains exactly one mechanism's primitive name\n element.\n\n @return true if this is an MN, false otherwise.\n","return_type":"boolean"}],"fields":[{"parameters":null,"name":"NT_HOSTBASED_SERVICE","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Oid indicating a host-based service name form.  It is used to\n represent services associated with host computers.  This name form\n is constructed using two elements, \"service\" and \"hostname\", as\n follows: service@hostname.<p>\n\n It represents the following Oid value:<br>\n  <code>{ iso(1) member-body(2) United\n States(840) mit(113554) infosys(1) gssapi(2) generic(1) service_name(4)\n }</code>\n","return_type":null},{"parameters":null,"name":"NT_USER_NAME","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Name type to indicate a named user on a local system.<p>\n It represents the following Oid value:<br>\n  <code>{ iso(1) member-body(2) United\n States(840) mit(113554) infosys(1) gssapi(2) generic(1) user_name(1)\n }</code>\n","return_type":null},{"parameters":null,"name":"NT_MACHINE_UID_NAME","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Name type to indicate a numeric user identifier corresponding to a\n user on a local system. (e.g. Uid).<p>\n\n  It represents the following Oid value:<br>\n <code>{ iso(1) member-body(2) United States(840) mit(113554)\n infosys(1) gssapi(2) generic(1) machine_uid_name(2) }</code>\n","return_type":null},{"parameters":null,"name":"NT_STRING_UID_NAME","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Name type to indicate a string of digits representing the numeric\n user identifier of a user on a local system.<p>\n\n It represents the following Oid value:<br>\n <code>{ iso(1) member-body(2) United\n States(840) mit(113554) infosys(1) gssapi(2) generic(1)\n string_uid_name(3) }</code>\n","return_type":null},{"parameters":null,"name":"NT_ANONYMOUS","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Name type for representing an anonymous entity.<p>\n It represents the following Oid value:<br>\n <code>{ 1(iso), 3(org), 6(dod), 1(internet),\n 5(security), 6(nametypes), 3(gss-anonymous-name) }</code>\n","return_type":null},{"parameters":null,"name":"NT_EXPORT_NAME","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Name type used to indicate an exported name produced by the export\n method.<p>\n\n It represents the following Oid value:<br> <code>{ 1(iso),\n 3(org), 6(dod), 1(internet), 5(security), 6(nametypes),\n 4(gss-api-exported-name) }</code>\n","return_type":null}],"abstract":true,"static":false,"final":false,"package":"org.ietf.jgss","description":" This interface encapsulates a single GSS-API principal entity. The\n application obtains an implementation of this interface\n through one of the <code>createName</code> methods that exist in the {@link\n GSSManager GSSManager} class. Conceptually a GSSName contains many\n representations of the entity or many primitive name elements, one for\n each supported underlying mechanism. In GSS terminology, a GSSName that\n contains an element from just one mechanism is called a Mechanism Name\n (MN)<p>\n\n Since different authentication mechanisms may employ different\n namespaces for identifying their principals, GSS-API's naming support is\n necessarily complex in multi-mechanism environments (or even in some\n single-mechanism environments where the underlying mechanism supports\n multiple namespaces). Different name formats and their definitions are\n identified with {@link Oid Oid's} and some standard types\n are defined in this interface. The format of the names can be derived\n based on the unique <code>Oid</code> of its name type.<p>\n\n Included below are code examples utilizing the <code>GSSName</code> interface.\n The code below creates a <code>GSSName</code>, converts it to an MN, performs a\n comparison, obtains a printable representation of the name, exports it\n to a byte array and then re-imports to obtain a\n new <code>GSSName</code>.<p>\n <pre>\n      GSSManager manager = GSSManager.getInstance();\n\n      // create a host based service name\n      GSSName name = manager.createName(\"service@host\",\n                   GSSName.NT_HOSTBASED_SERVICE);\n\n      Oid krb5 = new Oid(\"1.2.840.113554.1.2.2\");\n\n      GSSName mechName = name.canonicalize(krb5);\n\n      // the above two steps are equivalent to the following\n      GSSName mechName = manager.createName(\"service@host\",\n                      GSSName.NT_HOSTBASED_SERVICE, krb5);\n\n      // perform name comparison\n      if (name.equals(mechName))\n              print(\"Names are equals.\");\n\n      // obtain textual representation of name and its printable\n      // name type\n      print(mechName.toString() +\n                      mechName.getStringNameType().toString());\n\n      // export and re-import the name\n      byte [] exportName = mechName.export();\n\n      // create a new name object from the exported buffer\n      GSSName newName = manager.createName(exportName,\n                      GSSName.NT_EXPORT_NAME);\n\n </pre>\n @see #export()\n @see #equals(GSSName)\n @see GSSManager#createName(String, Oid)\n @see GSSManager#createName(String, Oid, Oid)\n @see GSSManager#createName(byte[], Oid)\n\n @author Mayank Upadhyay\n @since 1.4\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"GSSManager","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":null,"name":"GSSManager","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null}],"methods":[{"parameters":null,"name":"getInstance","modifier":"public","static":true,"final":false,"package":"org.ietf.jgss","description":" Returns the default GSSManager implementation.\n\n @return a GSSManager implementation\n","return_type":"GSSManager"},{"parameters":null,"name":"getMechs","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a list of mechanisms that are available to GSS-API callers\n through this GSSManager. The default GSSManager obtained from the\n {@link #getInstance() getInstance()} method includes the Oid\n \"1.2.840.113554.1.2.2\" in its list. This Oid identifies the Kerberos\n v5 GSS-API mechanism that is defined in RFC 1964.\n\n @return an array of Oid objects corresponding to the mechanisms that\n are available. A <code>null</code> value is returned when no\n mechanism are available (an example of this would be when mechanism\n are dynamically configured, and currently no mechanisms are\n installed).\n","return_type":"Oid"},{"parameters":"Oid:mech","name":"getNamesForMech","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns then name types supported by the indicated mechanism.<p>\n\n The default GSSManager instance includes support for the Kerberos v5\n mechanism. When this mechanism (\"1.2.840.113554.1.2.2\") is indicated,\n the returned list will contain at least the following nametypes:\n {@link GSSName#NT_HOSTBASED_SERVICE GSSName.NT_HOSTBASED_SERVICE},\n {@link GSSName#NT_EXPORT_NAME GSSName.NT_EXPORT_NAME}, and the\n Kerberos v5 specific Oid \"1.2.840.113554.1.2.2.1\". The namespace for\n the Oid \"1.2.840.113554.1.2.2.1\" is defined in RFC 1964.\n\n @return an array of Oid objects corresponding to the name types that\n the mechanism supports.\n @param mech the Oid of the mechanism to query\n\n @see #getMechsForName(Oid)\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH}\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"Oid"},{"parameters":"Oid:nameType","name":"getMechsForName","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a list of mechanisms that support the indicated name type.<p>\n\n The Kerberos v5 mechanism (\"1.2.840.113554.1.2.2\") will always be\n returned in this list when the indicated nametype is one of\n {@link GSSName#NT_HOSTBASED_SERVICE GSSName.NT_HOSTBASED_SERVICE},\n {@link GSSName#NT_EXPORT_NAME GSSName.NT_EXPORT_NAME}, or\n \"1.2.840.113554.1.2.2.1\".\n\n @return an array of Oid objects corresponding to the mechanisms that\n support the specified name type.  <code>null</code> is returned when no\n mechanisms are found to support the specified name type.\n @param nameType the Oid of the name type to look for\n\n @see #getNamesForMech(Oid)\n","return_type":"Oid"},{"parameters":"String:nameStr,Oid:nameType","name":"createName","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Factory method to convert a string name from the\n specified namespace to a GSSName object. In general, the\n <code>GSSName</code> object created  will contain multiple\n representations of the name, one for each mechanism that is\n supported; two examples that are exceptions to this are when\n the namespace type parameter indicates NT_EXPORT_NAME or when the\n GSS-API implementation is not multi-mechanism. It is\n not recommended to use this method with a NT_EXPORT_NAME type because\n representing a previously exported name consisting of arbitrary bytes\n as a String might cause problems with character encoding schemes. In\n such cases it is recommended that the bytes be passed in directly to\n the overloaded form of this method {@link #createName(byte[],\n Oid) createName}.\n\n @param nameStr the string representing a printable form of the name to\n create.\n @param nameType the Oid specifying the namespace of the printable name\n supplied. <code>null</code> can be used to specify\n that a mechanism specific default printable syntax should\n be assumed by each mechanism that examines nameStr.\n It is not advisable to use the nametype NT_EXPORT_NAME with this\n method.\n @return a GSSName representing the indicated principal\n\n @see GSSName\n @see GSSName#NT_EXPORT_NAME\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n    {@link GSSException#BAD_NAME GSSException.BAD_NAME},\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSName"},{"parameters":"byte[]:name,Oid:nameType","name":"createName","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Factory method to convert a byte array containing a\n name from the specified namespace to a GSSName object. In general,\n the <code>GSSName</code> object created  will contain multiple\n representations of the name, one for each mechanism that is\n supported; two examples that are exceptions to this are when the\n namespace type parameter indicates NT_EXPORT_NAME or when the\n GSS-API implementation is not multi-mechanism. The bytes that are\n passed in are interpreted by each underlying mechanism according to\n some encoding scheme of its choice for the given nametype.\n\n @param name the byte array containing the name to create\n @param nameType the Oid specifying the namespace of the name supplied\n in the byte array. <code>null</code> can be used to specify that a\n mechanism specific default syntax should be assumed by each mechanism\n that examines the byte array.\n @return a GSSName representing the indicated principal\n\n @see GSSName\n @see GSSName#NT_EXPORT_NAME\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n    {@link GSSException#BAD_NAME GSSException.BAD_NAME},\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSName"},{"parameters":"String:nameStr,Oid:nameType,Oid:mech","name":"createName","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":"  Factory method to convert a string name from the\n specified namespace to a GSSName object and canonicalize it at the\n same time for a mechanism. In other words, this method is\n a utility that does the equivalent of two steps: the {@link\n #createName(String, Oid) createName} and then also the {@link\n GSSName#canonicalize(Oid) GSSName.canonicalize}.\n\n @param nameStr the string representing a printable form of the name to\n create.\n @param nameType the Oid specifying the namespace of the printable name\n supplied. <code>null</code> can be used to specify\n that a mechanism specific default printable syntax should\n be assumed by each mechanism that examines nameStr.\n It is not advisable to use the nametype NT_EXPORT_NAME with this\n method.\n @param mech Oid specifying the mechanism for which the name should be\n canonicalized\n @return a GSSName representing the indicated principal\n\n @see GSSName#canonicalize(Oid)\n @see GSSName#NT_EXPORT_NAME\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n    {@link GSSException#BAD_NAME GSSException.BAD_NAME},\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSName"},{"parameters":"byte[]:name,Oid:nameType,Oid:mech","name":"createName","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":"  Factory method to convert a byte array containing a\n name from the specified namespace to a GSSName object and canonicalize\n it at the same time for a mechanism. In other words, this method is a\n utility that does the equivalent of two steps: the {@link\n #createName(byte[], Oid) createName} and then also {@link\n GSSName#canonicalize(Oid) GSSName.canonicalize}.\n\n @param name the byte array containing the name to create\n @param nameType the Oid specifying the namespace of the name supplied\n in the byte array. <code>null</code> can be used to specify that a\n mechanism specific default syntax should be assumed by each mechanism\n that examines the byte array.\n @param mech Oid specifying the mechanism for which the name should be\n canonicalized\n @return a GSSName representing the indicated principal\n\n @see GSSName#canonicalize(Oid)\n @see GSSName#NT_EXPORT_NAME\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n    {@link GSSException#BAD_NAME GSSException.BAD_NAME},\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSName"},{"parameters":"int:usage","name":"createCredential","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Factory method for acquiring default credentials.  This will cause\n the GSS-API to use system specific defaults for the set of mechanisms,\n name, and lifetime.<p>\n\n GSS-API mechanism providers must impose a local access-control\n policy on callers to prevent unauthorized callers from acquiring\n credentials to which they are not entitled. The kinds of permissions\n needed by different mechanism providers will be documented on a\n per-mechanism basis. A failed permission check might cause a {@link\n java.lang.SecurityException SecurityException} to be thrown from\n this method.\n\n @param usage The intended usage for this credential object. The value\n of this parameter must be one of:\n {@link GSSCredential#INITIATE_AND_ACCEPT\n GSSCredential.INITIATE_AND_ACCEPT},\n {@link GSSCredential#ACCEPT_ONLY GSSCredential.ACCEPT_ONLY}, and\n {@link GSSCredential#INITIATE_ONLY GSSCredential.INITIATE_ONLY}.\n @return a GSSCredential of the requested type.\n\n @see GSSCredential\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n    {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n    {@link GSSException#BAD_NAME GSSException.BAD_NAME},\n    {@link GSSException#CREDENTIALS_EXPIRED\n                                   GSSException.CREDENTIALS_EXPIRED},\n    {@link GSSException#NO_CRED GSSException.NO_CRED},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSCredential"},{"parameters":"GSSName:name,int:lifetime,Oid:mech,int:usage","name":"createCredential","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Factory method for acquiring a single mechanism credential.<p>\n\n GSS-API mechanism providers must impose a local access-control\n policy on callers to prevent unauthorized callers from acquiring\n credentials to which they are not entitled. The kinds of permissions\n needed by different mechanism providers will be documented on a\n per-mechanism basis. A failed permission check might cause a {@link\n java.lang.SecurityException SecurityException} to be thrown from\n this method. <p>\n\n Non-default values for lifetime cannot always be honored by the\n underlying mechanisms, thus applications should be prepared to call\n {@link GSSCredential#getRemainingLifetime() getRemainingLifetime}\n on the returned credential.<p>\n\n @param name the name of the principal for whom this credential is to be\n acquired.  Use <code>null</code> to specify the default principal.\n @param lifetime The number of seconds that credentials should remain\n valid.  Use {@link GSSCredential#INDEFINITE_LIFETIME\n GSSCredential.INDEFINITE_LIFETIME} to request that the credentials\n have the maximum permitted lifetime.  Use {@link\n GSSCredential#DEFAULT_LIFETIME GSSCredential.DEFAULT_LIFETIME} to\n request default credential lifetime.\n @param mech the Oid of the desired mechanism.  Use <code>(Oid) null\n </code> to request the default mechanism.\n @param usage The intended usage for this credential object. The value\n of this parameter must be one of:\n {@link GSSCredential#INITIATE_AND_ACCEPT\n GSSCredential.INITIATE_AND_ACCEPT},\n {@link GSSCredential#ACCEPT_ONLY GSSCredential.ACCEPT_ONLY}, and\n {@link GSSCredential#INITIATE_ONLY GSSCredential.INITIATE_ONLY}.\n @return a GSSCredential of the requested type.\n\n @see GSSCredential\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n    {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n    {@link GSSException#BAD_NAME GSSException.BAD_NAME},\n    {@link GSSException#CREDENTIALS_EXPIRED\n                                   GSSException.CREDENTIALS_EXPIRED},\n    {@link GSSException#NO_CRED GSSException.NO_CRED},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSCredential"},{"parameters":"GSSName:name,int:lifetime,org.ietf.jgss.Oid[]:mechs,int:usage","name":"createCredential","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Factory method for acquiring credentials over a set of\n mechanisms. This method attempts to acquire credentials for\n each of the mechanisms specified in the array called mechs.  To\n determine the list of mechanisms for which the acquisition of\n credentials succeeded, the caller should use the {@link\n GSSCredential#getMechs() GSSCredential.getMechs} method.<p>\n\n GSS-API mechanism providers must impose a local access-control\n policy on callers to prevent unauthorized callers from acquiring\n credentials to which they are not entitled. The kinds of permissions\n needed by different mechanism providers will be documented on a\n per-mechanism basis. A failed permission check might cause a {@link\n java.lang.SecurityException SecurityException} to be thrown from\n this method.<p>\n\n Non-default values for lifetime cannot always be honored by the\n underlying mechanisms, thus applications should be prepared to call\n {@link GSSCredential#getRemainingLifetime() getRemainingLifetime}\n on the returned credential.<p>\n\n @param name the name of the principal for whom this credential is to\n be acquired.  Use <code>null</code> to specify the default\n principal.\n @param lifetime The number of seconds that credentials should remain\n valid.  Use {@link GSSCredential#INDEFINITE_LIFETIME\n GSSCredential.INDEFINITE_LIFETIME} to request that the credentials\n have the maximum permitted lifetime.  Use {@link\n GSSCredential#DEFAULT_LIFETIME GSSCredential.DEFAULT_LIFETIME} to\n request default credential lifetime.\n @param mechs an array of Oid's indicating the mechanisms over which\n the credential is to be acquired.  Use <code>(Oid[]) null</code> for\n requesting a system specific default set of mechanisms.\n @param usage The intended usage for this credential object. The value\n of this parameter must be one of:\n {@link GSSCredential#INITIATE_AND_ACCEPT\n GSSCredential.INITIATE_AND_ACCEPT},\n {@link GSSCredential#ACCEPT_ONLY GSSCredential.ACCEPT_ONLY}, and\n {@link GSSCredential#INITIATE_ONLY GSSCredential.INITIATE_ONLY}.\n @return a GSSCredential of the requested type.\n\n @see GSSCredential\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n    {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n    {@link GSSException#BAD_NAME GSSException.BAD_NAME},\n    {@link GSSException#CREDENTIALS_EXPIRED\n                                   GSSException.CREDENTIALS_EXPIRED},\n    {@link GSSException#NO_CRED GSSException.NO_CRED},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSCredential"},{"parameters":"GSSName:peer,Oid:mech,GSSCredential:myCred,int:lifetime","name":"createContext","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Factory method for creating a context on the initiator's\n side.\n\n Some mechanism providers might require that the caller be granted\n permission to initiate a security context. A failed permission check\n might cause a {@link java.lang.SecurityException SecurityException}\n to be thrown from this method.<p>\n\n Non-default values for lifetime cannot always be honored by the\n underlying mechanism, thus applications should be prepared to call\n {@link GSSContext#getLifetime() getLifetime} on the returned\n context.<p>\n\n @param peer the name of the target peer.\n @param mech the Oid of the desired mechanism.  Use <code>null</code>\n to request the default mechanism.\n @param myCred the credentials of the initiator.  Use\n <code>null</code> to act as the default initiator principal.\n @param lifetime the lifetime, in seconds, requested for the\n context. Use {@link GSSContext#INDEFINITE_LIFETIME\n GSSContext.INDEFINITE_LIFETIME} to request that the context have the\n maximum permitted lifetime. Use {@link GSSContext#DEFAULT_LIFETIME\n GSSContext.DEFAULT_LIFETIME} to request a default lifetime for the\n context.\n @return an unestablished GSSContext\n\n @see GSSContext\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#NO_CRED GSSException.NO_CRED}\n    {@link GSSException#CREDENTIALS_EXPIRED\n                      GSSException.CREDENTIALS_EXPIRED}\n    {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH}\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSContext"},{"parameters":"GSSCredential:myCred","name":"createContext","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Factory method for creating a context on the acceptor' side.  The\n context's properties will be determined from the input token supplied\n to the accept method.\n\n Some mechanism providers might require that the caller be granted\n permission to accept a security context. A failed permission check\n might cause a {@link java.lang.SecurityException SecurityException}\n to be thrown from this method.\n\n @param myCred the credentials for the acceptor.  Use\n <code>null</code> to act as a default acceptor principal.\n @return an unestablished GSSContext\n\n @see GSSContext\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#NO_CRED GSSException.NO_CRED}\n    {@link GSSException#CREDENTIALS_EXPIRED\n                        GSSException.CREDENTIALS_EXPIRED}\n    {@link GSSException#BAD_MECH GSSException.BAD_MECH}\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSContext"},{"parameters":"byte[]:interProcessToken","name":"createContext","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Factory method for creating a previously exported context.  The\n context properties will be determined from the input token and\n cannot be modified through the set methods.<p>\n\n Implementations are not required to support the inter-process\n transfer of security contexts.  Before exporting a context, calling\n the {@link GSSContext#isTransferable() GSSContext.isTransferable}\n will indicate if the context is transferable. Calling this method in\n an implementation that does not support it will result in a\n <code>GSSException</code> with the error\n code {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE}.\n\n Some mechanism providers might require that the caller be granted\n permission to initiate or accept a security context. A failed\n permission check might cause a {@link java.lang.SecurityException\n SecurityException} to be thrown from this method.\n\n @param interProcessToken the token previously emitted from the\n export method.\n @return the previously established GSSContext\n\n @see GSSContext\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#NO_CONTEXT GSSException.NO_CONTEXT},\n    {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},\n    {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE},\n    {@link GSSException#UNAUTHORIZED GSSException.UNAUTHORIZED},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSContext"},{"parameters":"Provider:p,Oid:mech","name":"addProviderAtFront","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" This method is used to indicate to the GSSManager that the\n application would like a particular provider to be used ahead of all\n others when support is desired for the given mechanism. When a value\n of null is used instead of an <code>Oid</code> for the mechanism,\n the GSSManager must use the indicated provider ahead of all others\n no matter what the mechanism is. Only when the indicated provider\n does not support the needed mechanism should the GSSManager move on\n to a different provider.<p>\n\n Calling this method repeatedly preserves the older settings but\n lowers them in preference thus forming an ordered list of provider\n and <code>Oid</code> pairs that grows at the top.<p>\n\n Calling addProviderAtFront with a null <code>Oid</code> will remove\n all previous preferences that were set for this provider in the\n GSSManager instance. Calling addProviderAtFront with a non-null\n <code>Oid</code> will remove any previous preference that was set\n using this mechanism and this provider together.<p>\n\n If the GSSManager implementation does not support an SPI with a\n pluggable provider architecture it should throw a GSSException with\n the status code GSSException.UNAVAILABLE to indicate that the\n operation is unavailable.<p>\n\n Suppose an application desired that the provider A always be checked\n first when any mechanism is needed, it would call:<p>\n <pre>\n         GSSManager mgr = GSSManager.getInstance();\n         // mgr may at this point have its own pre-configured list\n         // of provider preferences. The following will prepend to\n         // any such list:\n\n         mgr.addProviderAtFront(A, null);\n </pre>\n Now if it also desired that the mechanism of Oid m1 always be\n obtained from the provider B before the previously set A was checked,\n it would call:<p>\n <pre>\n         mgr.addProviderAtFront(B, m1);\n </pre>\n The GSSManager would then first check with B if m1 was needed. In\n case B did not provide support for m1, the GSSManager would continue\n on to check with A.  If any mechanism m2 is needed where m2 is\n different from m1 then the GSSManager would skip B and check with A\n directly.<p>\n\n Suppose at a later time the following call is made to the same\n GSSManager instance:<p>\n <pre>\n         mgr.addProviderAtFront(B, null)\n </pre>\n then the previous setting with the pair (B, m1) is subsumed by this\n and should be removed. Effectively the list of preferences now\n becomes {(B, null), (A, null),\n         ... //followed by the pre-configured list.<p>\n\n Please note, however, that the following call:\n <pre>\n         mgr.addProviderAtFront(A, m3)\n </pre>\n does not subsume the previous setting of (A, null) and the list will\n effectively become {(A, m3), (B, null), (A, null), ...}\n\n @param p the provider instance that should be used whenever support\n is needed for mech.\n @param mech the mechanism for which the provider is being set\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"Provider:p,Oid:mech","name":"addProviderAtEnd","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" This method is used to indicate to the GSSManager that the\n application would like a particular provider to be used if no other\n provider can be found that supports the given mechanism. When a value\n of null is used instead of an Oid for the mechanism, the GSSManager\n must use the indicated provider for any mechanism.<p>\n\n Calling this method repeatedly preserves the older settings but\n raises them above newer ones in preference thus forming an ordered\n list of providers and Oid pairs that grows at the bottom. Thus the\n older provider settings will be utilized first before this one is.<p>\n\n If there are any previously existing preferences that conflict with\n the preference being set here, then the GSSManager should ignore this\n request.<p>\n\n If the GSSManager implementation does not support an SPI with a\n pluggable provider architecture it should throw a GSSException with\n the status code GSSException.UNAVAILABLE to indicate that the\n operation is unavailable.<p>\n\n Suppose an application desired that when a mechanism of Oid m1 is\n needed the system default providers always be checked first, and only\n when they do not support m1 should a provider A be checked. It would\n then make the call:<p>\n <pre>\n         GSSManager mgr = GSSManager.getInstance();\n         mgr.addProviderAtEnd(A, m1);\n </pre>\n Now, if it also desired that for all mechanisms the provider B be\n checked after all configured providers have been checked, it would\n then call:<p>\n <pre>\n         mgr.addProviderAtEnd(B, null);\n </pre>\n Effectively the list of preferences now becomes {..., (A, m1), (B,\n null)}.<p>\n\n Suppose at a later time the following call is made to the same\n GSSManager instance:<p>\n <pre>\n         mgr.addProviderAtEnd(B, m2)\n </pre>\n then the previous setting with the pair (B, null) subsumes this and\n therefore this request should be ignored. The same would happen if a\n request is made for the already existing pairs of (A, m1) or (B,\n null).<p>\n\n Please note, however, that the following call:<p>\n <pre>\n         mgr.addProviderAtEnd(A, null)\n </pre>\n is not subsumed by the previous setting of (A, m1) and the list will\n effectively become {..., (A, m1), (B, null), (A, null)}\n\n @param p the provider instance that should be used whenever support\n is needed for mech.\n @param mech the mechanism for which the provider is being set\n\n @throws GSSException containing the following\n major error codes:\n    {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE},\n    {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"}],"fields":[],"abstract":true,"static":false,"final":false,"package":"org.ietf.jgss","description":" This class serves as a factory for other important\n GSS-API classes and also provides information about the mechanisms that\n are supported. It can create instances of classes\n implementing the following three GSS-API interfaces: {@link\n GSSName GSSName}, {@link GSSCredential GSSCredential}, and {@link\n GSSContext GSSContext}. It also has methods to query for the list\n of available mechanisms and the nametypes that each mechanism\n supports.<p>\n\n An instance of the default <code>GSSManager</code> subclass\n may be obtained through the static method {@link #getInstance()\n getInstance}, but applications are free to instantiate other subclasses\n of <code>GSSManager</code>. The default <code>GSSManager</code> instance\n will support the Kerberos v5 GSS-API mechanism in addition to any\n others. This mechanism is identified by the Oid \"1.2.840.113554.1.2.2\"\n and is defined in RFC 1964.<p>\n\n A subclass extending the <code>GSSManager</code> abstract class may be\n implemented  as a modular provider based layer that utilizes some well\n known  service provider specification. The <code>GSSManager</code> API\n allows the application to set provider preferences on\n such an implementation. These methods also allow the implementation to\n throw a well-defined exception in case provider based configuration is\n not supported. Applications that expect to be portable should be aware\n of this and recover cleanly by catching the exception.<p>\n\n It is envisioned that there will be three most common ways in which\n providers will be used:<p>\n <ol>\n <li> The application does not care about what provider is used (the\n default case).\n <li> The application wants a particular provider to be used\n preferentially, either for a particular mechanism or all the\n time, irrespective of mechanism.\n <li> The application wants to use the locally configured providers\n as far as possible but if support is missing for one or more\n mechanisms then it wants to fall back on its own provider.\n</ol><p>\n\n The <code>GSSManager</code> class has two methods that enable these modes of\n usage:  {@link #addProviderAtFront(Provider, Oid) addProviderAtFront} and\n {@link #addProviderAtEnd(Provider, Oid) addProviderAtEnd}. These methods\n have the effect of creating an ordered list of <i>&lt;provider,\n oid&gt;</i> pairs  where each pair indicates a preference of provider\n for a given oid.<p>\n\n It is important to note that there are certain interactions\n between the different GSS-API objects that are created by a\n GSSManager, where the provider that is used for a particular mechanism\n might need to be consistent across all objects. For instance, if a\n GSSCredential contains elements from a provider <i>p</i> for a mechanism\n <i>m</i>, it should generally be passed in to a GSSContext that will use\n provider <i>p</i> for the mechanism <i>m</i>. A simple rule of thumb\n that will maximize portability is that objects created from different\n GSSManager's should not be mixed, and if possible, a different\n GSSManager instance should be created if the application wants to invoke\n the <code>addProviderAtFront</code> method on a GSSManager that has\n already created an object.<p>\n\n  Here is some sample code showing how the GSSManager might be used: <p>\n <pre>\n     GSSManager manager = GSSManager.getInstance();\n\n     Oid krb5Mechanism = new Oid(\"1.2.840.113554.1.2.2\");\n     Oid krb5PrincipalNameType = new Oid(\"1.2.840.113554.1.2.2.1\");\n\n     // Identify who the client wishes to be\n     GSSName userName = manager.createName(\"duke\", GSSName.NT_USER_NAME);\n\n     // Identify the name of the server. This uses a Kerberos specific\n     // name format.\n     GSSName serverName = manager.createName(\"nfs/foo.sun.com\",\n                                             krb5PrincipalNameType);\n\n     // Acquire credentials for the user\n     GSSCredential userCreds = manager.createCredential(userName,\n                                             GSSCredential.DEFAULT_LIFETIME,\n                                             krb5Mechanism,\n                                             GSSCredential.INITIATE_ONLY);\n\n     // Instantiate and initialize a security context that will be\n     // established with the server\n     GSSContext context = manager.createContext(serverName,\n                                                krb5Mechanism,\n                                                userCreds,\n                                                GSSContext.DEFAULT_LIFETIME);\n </pre><p>\n\n The server side might use the following variation of this source:<p>\n\n <pre>\n     // Acquire credentials for the server\n     GSSCredential serverCreds = manager.createCredential(serverName,\n                                             GSSCredential.DEFAULT_LIFETIME,\n                                             krb5Mechanism,\n                                             GSSCredential.ACCEPT_ONLY);\n\n     // Instantiate and initialize a security context that will\n     // wait for an establishment request token from the client\n     GSSContext context = manager.createContext(serverCreds);\n </pre>\n\n @author Mayank Upadhyay\n @see GSSName\n @see GSSCredential\n @see GSSContext\n @since 1.4\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"GSSException","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"int:majorCode","name":"GSSException","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":"  Creates a GSSException object with a specified major code.\n\n @param majorCode the The GSS error code for the problem causing this\n exception to be thrown.\n","return_type":null},{"parameters":"int:majorCode,String:majorString","name":"GSSException","modifier":"package-private","static":false,"final":false,"package":"org.ietf.jgss","description":" Construct a GSSException object with a specified major code and a\n specific major string for it.\n\n @param majorCode the fatal error code causing this exception.\n @param majorString an expicit message to be included in this exception\n","return_type":null},{"parameters":"int:majorCode,int:minorCode,String:minorString","name":"GSSException","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Creates a GSSException object with the specified major code, minor\n code, and minor code textual explanation.  This constructor is to be\n used when the exception is originating from the underlying mechanism\n level. It allows the setting of both the GSS code and the mechanism\n code.\n\n @param majorCode the GSS error code for the problem causing this\n exception to be thrown.\n @param minorCode the mechanism level error code for the problem\n causing this exception to be thrown.\n @param minorString the textual explanation of the mechanism error\n code.\n","return_type":null}],"methods":[{"parameters":null,"name":"getMajor","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the GSS-API level major error code for the problem causing\n this exception to be thrown. Major error codes are\n defined at the mechanism independent GSS-API level in this\n class. Mechanism specific error codes that might provide more\n information are set as the minor error code.\n\n @return int the GSS-API level major error code causing this exception\n @see #getMajorString\n @see #getMinor\n @see #getMinorString\n","return_type":"int"},{"parameters":null,"name":"getMinor","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the mechanism level error code for the problem causing this\n exception to be thrown. The minor code is set by the underlying\n mechanism.\n\n @return int the mechanism error code; 0 indicates that it has not\n been set.\n @see #getMinorString\n @see #setMinor\n","return_type":"int"},{"parameters":null,"name":"getMajorString","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a string explaining the GSS-API level major error code in\n this exception.\n\n @return String explanation string for the major error code\n @see #getMajor\n @see #toString\n","return_type":"String"},{"parameters":null,"name":"getMinorString","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a string explaining the mechanism specific error code.\n If the minor status code is 0, then no mechanism level error details\n will be available.\n\n @return String a textual explanation of mechanism error code\n @see #getMinor\n @see #getMajorString\n @see #toString\n","return_type":"String"},{"parameters":"int:minorCode,String:message","name":"setMinor","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Used by the exception thrower to set the mechanism\n level minor error code and its string explanation.  This is used by\n mechanism providers to indicate error details.\n\n @param minorCode the mechanism specific error code\n @param message textual explanation of the mechanism error code\n @see #getMinor\n","return_type":"void"},{"parameters":null,"name":"toString","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a textual representation of both the major and the minor\n status codes.\n\n @return a String with the error descriptions\n","return_type":"String"},{"parameters":null,"name":"getMessage","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a textual representation of both the major and the minor\n status codes.\n\n @return a String with the error descriptions\n","return_type":"String"},{"parameters":"int:major","name":"validateMajor","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":"boolean"}],"fields":[{"parameters":null,"name":"serialVersionUID","modifier":"private","static":true,"final":true,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"BAD_BINDINGS","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Channel bindings mismatch.\n","return_type":null},{"parameters":null,"name":"BAD_MECH","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Unsupported mechanism requested.\n","return_type":null},{"parameters":null,"name":"BAD_NAME","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Invalid name provided.\n","return_type":null},{"parameters":null,"name":"BAD_NAMETYPE","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Name of unsupported type provided.\n","return_type":null},{"parameters":null,"name":"BAD_STATUS","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Invalid status code.\n","return_type":null},{"parameters":null,"name":"BAD_MIC","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Token had invalid integrity check.\n","return_type":null},{"parameters":null,"name":"CONTEXT_EXPIRED","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Security context expired.\n","return_type":null},{"parameters":null,"name":"CREDENTIALS_EXPIRED","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Expired credentials.\n","return_type":null},{"parameters":null,"name":"DEFECTIVE_CREDENTIAL","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Defective credentials.\n\n","return_type":null},{"parameters":null,"name":"DEFECTIVE_TOKEN","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Defective token.\n\n","return_type":null},{"parameters":null,"name":"FAILURE","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" General failure, unspecified at GSS-API level.\n","return_type":null},{"parameters":null,"name":"NO_CONTEXT","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Invalid security context.\n","return_type":null},{"parameters":null,"name":"NO_CRED","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Invalid credentials.\n","return_type":null},{"parameters":null,"name":"BAD_QOP","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Unsupported QOP value.\n","return_type":null},{"parameters":null,"name":"UNAUTHORIZED","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Operation unauthorized.\n","return_type":null},{"parameters":null,"name":"UNAVAILABLE","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Operation unavailable.\n","return_type":null},{"parameters":null,"name":"DUPLICATE_ELEMENT","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Duplicate credential element requested.\n","return_type":null},{"parameters":null,"name":"NAME_NOT_MN","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Name contains multi-mechanism elements.\n","return_type":null},{"parameters":null,"name":"DUPLICATE_TOKEN","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" The token was a duplicate of an earlier token.\n This is a fatal error code that may occur during\n context establishment.  It is not used to indicate\n supplementary status values. The MessageProp object is\n used for that purpose.\n","return_type":null},{"parameters":null,"name":"OLD_TOKEN","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" The token's validity period has expired.  This is a\n fatal error code that may occur during context establishment.\n It is not used to indicate supplementary status values.\n The MessageProp object is used for that purpose.\n","return_type":null},{"parameters":null,"name":"UNSEQ_TOKEN","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" A later token has already been processed.  This is a\n fatal error code that may occur during context establishment.\n It is not used to indicate supplementary status values.\n The MessageProp object is used for that purpose.\n","return_type":null},{"parameters":null,"name":"GAP_TOKEN","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" An expected per-message token was not received.  This is a\n fatal error code that may occur during context establishment.\n It is not used to indicate supplementary status values.\n The MessageProp object is used for that purpose.\n","return_type":null},{"parameters":null,"name":"messages","modifier":"private","static":true,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"major","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":" The major code for this exception\n\n @serial\n","return_type":null},{"parameters":null,"name":"minor","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":" The minor code for this exception\n\n @serial\n","return_type":null},{"parameters":null,"name":"minorMessage","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":" The text string for minor code\n\n @serial\n","return_type":null},{"parameters":null,"name":"majorString","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":" Alternate text string for major code\n\n @serial\n","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.ietf.jgss","description":" This exception is thrown whenever a GSS-API error occurs, including\n any mechanism specific error.  It may contain both the major and the\n minor GSS-API status codes.  Major error codes are those defined at the\n GSS-API level in this class. Minor error codes are mechanism specific\n error codes that can provide additional information. The underlying\n mechanism implementation is responsible for setting appropriate minor\n status codes when throwing this exception.  Aside from delivering the\n numeric error codes to the caller, this class performs the mapping from\n their numeric values to textual representations. <p>\n\n @author Mayank Upadhyay\n @since 1.4\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"GSSCredential","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[],"methods":[{"parameters":null,"name":"dispose","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Releases any sensitive information that the GSSCredential object may\n be containing.  Applications should call this method as soon as the\n credential is no longer needed to minimize the time any sensitive\n information is maintained.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":null,"name":"getName","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":"  Retrieves the name of the entity that the credential asserts.\n\n @return a GSSName representing the entity\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSName"},{"parameters":"Oid:mech","name":"getName","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Retrieves a Mechanism Name of the entity that the credential\n asserts. This is equivalent to calling {@link\n GSSName#canonicalize(Oid) canonicalize} on the value returned by\n the other form of {@link #getName() getName}.\n\n @param mech the Oid of the mechanism for which the Mechanism Name\n should be returned.\n @return a GSSName representing the entity canonicalized for the\n desired mechanism\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSName"},{"parameters":null,"name":"getRemainingLifetime","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the remaining lifetime in seconds for a credential.  The\n remaining lifetime is the minimum lifetime amongst all of the underlying\n mechanism specific credential elements.\n\n @return the minimum remaining lifetime in seconds for this\n credential. A return value of {@link #INDEFINITE_LIFETIME\n INDEFINITE_LIFETIME} indicates that the credential does\n not expire. A return value of 0 indicates that the credential is\n already expired.\n\n @see #getRemainingInitLifetime(Oid)\n @see #getRemainingAcceptLifetime(Oid)\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"int"},{"parameters":"Oid:mech","name":"getRemainingInitLifetime","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the lifetime in seconds for the credential to remain capable\n of initiating security contexts using the specified mechanism. This\n method queries the initiator credential element that belongs to the\n specified mechanism.\n\n @return the number of seconds remaining in the life of this credential\n element. A return value of {@link #INDEFINITE_LIFETIME\n INDEFINITE_LIFETIME} indicates that the credential element does not\n expire.  A return value of 0 indicates that the credential element is\n already expired.\n\n @param mech the Oid of the mechanism whose initiator credential element\n should be queried.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"int"},{"parameters":"Oid:mech","name":"getRemainingAcceptLifetime","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the lifetime in seconds for the credential to remain capable\n of accepting security contexts using the specified mechanism. This\n method queries the acceptor credential element that belongs to the\n specified mechanism.\n\n @return the number of seconds remaining in the life of this credential\n element. A return value of {@link #INDEFINITE_LIFETIME\n INDEFINITE_LIFETIME} indicates that the credential element does not\n expire.  A return value of 0 indicates that the credential element is\n already expired.\n\n @param mech the Oid of the mechanism whose acceptor credential element\n should be queried.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"int"},{"parameters":null,"name":"getUsage","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the credential usage mode. In other words, it\n tells us if this credential can be used for initiating or accepting\n security contexts. It does not tell us which mechanism(s) has to be\n used in order to do so. It is expected that an application will allow\n the GSS-API to pick a default mechanism after calling this method.\n\n @return The return value will be one of {@link #INITIATE_ONLY\n INITIATE_ONLY}, {@link #ACCEPT_ONLY ACCEPT_ONLY}, and {@link\n #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT}.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"int"},{"parameters":"Oid:mech","name":"getUsage","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the credential usage mode for a specific mechanism. In other\n words, it tells us if this credential can be used\n for initiating or accepting security contexts with a given underlying\n mechanism.\n\n @return The return value will be one of {@link #INITIATE_ONLY\n INITIATE_ONLY}, {@link #ACCEPT_ONLY ACCEPT_ONLY}, and {@link\n #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT}.\n @param mech the Oid of the mechanism whose credentials usage mode is\n to be determined.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"int"},{"parameters":null,"name":"getMechs","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a list of mechanisms supported by this credential. It does\n not tell us which ones can be used to initiate\n contexts and which ones can be used to accept contexts. The\n application must call the {@link #getUsage(Oid) getUsage} method with\n each of the returned Oid's to determine the possible modes of\n usage.\n\n @return an array of Oid's corresponding to the supported mechanisms.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"Oid"},{"parameters":"GSSName:name,int:initLifetime,int:acceptLifetime,Oid:mech,int:usage","name":"add","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Adds a mechanism specific credential-element to an existing\n credential.  This method allows the construction of credentials, one\n mechanism at a time.<p>\n\n This routine is envisioned to be used mainly by context acceptors\n during the creation of acceptor credentials which are to be used\n with a variety of clients using different security mechanisms.<p>\n\n This routine adds the new credential element \"in-place\".  To add the\n element in a new credential, first call <code>clone</code> to obtain a\n copy of this credential, then call its <code>add</code> method.<p>\n\n As always, GSS-API implementations must impose a local access-control\n policy on callers to prevent unauthorized callers from acquiring\n credentials to which they are not entitled.\n\n Non-default values for initLifetime and acceptLifetime cannot always\n be honored by the underlying mechanisms, thus callers should be\n prepared to call {@link #getRemainingInitLifetime(Oid)\n getRemainingInitLifetime} and {@link #getRemainingAcceptLifetime(Oid)\n getRemainingAcceptLifetime} on the credential.\n\n @param name the name of the principal for whom this credential is to\n be acquired.  Use <code>null</code> to specify the default\n principal.\n @param initLifetime the number of seconds that the credential element\n should remain valid for initiating of security contexts. Use {@link\n GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME}\n to request that the credentials have the maximum permitted lifetime\n for this.  Use {@link GSSCredential#DEFAULT_LIFETIME\n GSSCredential.DEFAULT_LIFETIME} to request default credential lifetime\n for this.\n @param acceptLifetime the number of seconds that the credential\n element should remain valid for accepting security contexts. Use {@link\n GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME}\n to request that the credentials have the maximum permitted lifetime\n for this.  Use {@link GSSCredential#DEFAULT_LIFETIME\n GSSCredential.DEFAULT_LIFETIME} to request default credential lifetime\n for this.\n @param mech the mechanism over which the credential is to be acquired.\n @param usage the usage mode that this credential\n element should add to the credential. The value\n of this parameter must be one of:\n {@link #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT},\n {@link #ACCEPT_ONLY ACCEPT_ONLY}, and\n {@link #INITIATE_ONLY INITIATE_ONLY}.\n\n @throws GSSException containing the following\n major error codes:\n         {@link GSSException#DUPLICATE_ELEMENT\n                          GSSException.DUPLICATE_ELEMENT},\n         {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n         {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n         {@link GSSException#NO_CRED GSSException.NO_CRED},\n         {@link GSSException#CREDENTIALS_EXPIRED\n                                  GSSException.CREDENTIALS_EXPIRED},\n         {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"Object:another","name":"equals","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Tests if this GSSCredential asserts the same entity as the supplied\n object.  The two credentials must be acquired over the same\n mechanisms and must refer to the same principal.\n\n @return <code>true</code> if the two GSSCredentials assert the same\n entity; <code>false</code> otherwise.\n @param another another GSSCredential for comparison to this one\n","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a hashcode value for this GSSCredential.\n\n @return a hashCode value\n","return_type":"int"}],"fields":[{"parameters":null,"name":"INITIATE_AND_ACCEPT","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Credential usage flag requesting that it be usable\n for both context initiation and acceptance.\n\n","return_type":null},{"parameters":null,"name":"INITIATE_ONLY","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Credential usage flag requesting that it be usable\n for context initiation only.\n\n","return_type":null},{"parameters":null,"name":"ACCEPT_ONLY","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" Credential usage flag requesting that it be usable\n for context acceptance only.\n\n","return_type":null},{"parameters":null,"name":"DEFAULT_LIFETIME","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" A lifetime constant representing the default credential lifetime. This\n value it set to 0.\n","return_type":null},{"parameters":null,"name":"INDEFINITE_LIFETIME","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" A lifetime constant representing indefinite credential lifetime.\n This value must is set to the maximum integer value in Java -\n {@link java.lang.Integer#MAX_VALUE Integer.MAX_VALUE}.\n","return_type":null}],"abstract":true,"static":false,"final":false,"package":"org.ietf.jgss","description":" This interface encapsulates the GSS-API credentials for an entity.  A\n credential contains all the necessary cryptographic information to\n enable the creation of a context on behalf of the entity that it\n represents.  It may contain multiple, distinct, mechanism specific\n credential elements, each containing information for a specific\n security mechanism, but all referring to the same entity. A credential\n may be used to perform context initiation, acceptance, or both.<p>\n\n Credentials are instantiated using one of the\n <code>createCredential</code> methods in the {@link GSSManager\n GSSManager} class. GSS-API credential creation is not\n intended to provide a \"login to the network\" function, as such a\n function would involve the creation of new credentials rather than\n merely acquiring a handle to existing credentials. The\n <a href=package-summary.html#useSubjectCredsOnly>section on credential\n acquisition</a> in the package level description describes\n how existing credentials are acquired in the Java platform. GSS-API\n implementations must impose a local access-control policy on callers to\n prevent unauthorized callers from acquiring credentials to which they\n are not entitled. <p>\n\n Applications will create a credential object passing the desired\n parameters.  The application can then use the query methods to obtain\n specific information about the instantiated credential object.\n When the credential is no longer needed, the application should call\n the {@link #dispose() dispose} method to release any resources held by\n the credential object and to destroy any cryptographically sensitive\n information.<p>\n\n This example code demonstrates the creation of a GSSCredential\n implementation for a specific entity, querying of its fields, and its\n release when it is no longer needed:<p>\n <pre>\n    GSSManager manager = GSSManager.getInstance();\n\n    // start by creating a name object for the entity\n    GSSName name = manager.createName(\"myusername\", GSSName.NT_USER_NAME);\n\n    // now acquire credentials for the entity\n    GSSCredential cred = manager.createCredential(name,\n                    GSSCredential.ACCEPT_ONLY);\n\n    // display credential information - name, remaining lifetime,\n    // and the mechanisms it has been acquired over\n    System.out.println(cred.getName().toString());\n    System.out.println(cred.getRemainingLifetime());\n\n    Oid [] mechs = cred.getMechs();\n    if (mechs != null) {\n            for (int i = 0; i < mechs.length; i++)\n                    System.out.println(mechs[i].toString());\n    }\n\n    // release system resources held by the credential\n    cred.dispose();\n </pre>\n\n @see GSSManager#createCredential(int)\n @see GSSManager#createCredential(GSSName, int, Oid, int)\n @see GSSManager#createCredential(GSSName, int, Oid[], int)\n @see #dispose()\n\n @author Mayank Upadhyay\n @since 1.4\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"GSSContext","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[],"methods":[{"parameters":"byte[]:inputBuf,int:offset,int:len","name":"initSecContext","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Called by the context initiator to start the context creation\n phase and process any tokens generated\n by the peer's <code>acceptSecContext</code> method.\n This method may return an output token which the application will need\n to send to the peer for processing by its <code>acceptSecContext</code>\n method. The application can call {@link #isEstablished()\n isEstablished} to determine if the context establishment phase is\n complete on this side of the context.  A return value of\n <code>false</code> from <code>isEstablished</code> indicates that\n more tokens are expected to be supplied to\n <code>initSecContext</code>.  Upon completion of the context\n establishment, the available context options may be queried through\n the get methods.<p>\n\n Note that it is possible that the <code>initSecContext</code> method\n return a token for the peer, and <code>isEstablished</code> return\n <code>true</code> also. This indicates that the token needs to be sent\n to the peer, but the local end of the context is now fully\n established.<p>\n\n Some mechanism providers might require that the caller be granted\n permission to initiate a security context. A failed permission check\n might cause a {@link java.lang.SecurityException SecurityException}\n to be thrown from this method.<p>\n\n @return a byte[] containing the token to be sent to the\n peer. <code>null</code> indicates that no token is generated.\n @param inputBuf token generated by the peer. This parameter is ignored\n on the first call since no token has been received from the peer.\n @param offset the offset within the inputBuf where the token begins.\n @param len the length of the token.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},\n   {@link GSSException#BAD_MIC GSSException.BAD_MIC},\n   {@link GSSException#NO_CRED GSSException.NO_CRED},\n   {@link GSSException#CREDENTIALS_EXPIRED\n                                  GSSException.CREDENTIALS_EXPIRED},\n   {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS},\n   {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN},\n   {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN},\n   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n   {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"byte"},{"parameters":"InputStream:inStream,OutputStream:outStream","name":"initSecContext","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Called by the context initiator to start the context creation\n phase and process any tokens generated\n by the peer's <code>acceptSecContext</code> method using\n streams. This method may write an output token to the\n <code>OutpuStream</code>, which the application will\n need to send to the peer for processing by its\n <code>acceptSecContext</code> call. Typically, the application would\n ensure this by calling the  {@link java.io.OutputStream#flush() flush}\n method on an <code>OutputStream</code> that encapsulates the\n connection between the two peers. The application can\n determine if a token is written to the OutputStream from the return\n value of this method. A return value of <code>0</code> indicates that\n no token was written. The application can call\n {@link #isEstablished() isEstablished} to determine if the context\n establishment phase is complete on this side of the context. A\n return  value of <code>false</code> from <code>isEstablished</code>\n indicates that more tokens are expected to be supplied to\n <code>initSecContext</code>.\n Upon completion of the context establishment, the available context\n options may be queried through the get methods.<p>\n\n Note that it is possible that the <code>initSecContext</code> method\n return a token for the peer, and <code>isEstablished</code> return\n <code>true</code> also. This indicates that the token needs to be sent\n to the peer, but the local end of the context is now fully\n established.<p>\n\n The GSS-API authentication tokens contain a definitive start and\n end. This method will attempt to read one of these tokens per\n invocation, and may block on the stream if only part of the token is\n available.  In all other respects this method is equivalent to the\n byte array based {@link #initSecContext(byte[], int, int)\n initSecContext}.<p>\n\n Some mechanism providers might require that the caller be granted\n permission to initiate a security context. A failed permission check\n might cause a {@link java.lang.SecurityException SecurityException}\n to be thrown from this method.<p>\n\n The following example code demonstrates how this method might be\n used:<p>\n <pre>\n     InputStream is ...\n     OutputStream os ...\n     GSSContext context ...\n\n     // Loop while there is still a token to be processed\n\n     while (!context.isEstablished()) {\n\n         context.initSecContext(is, os);\n\n         // send output token if generated\n         os.flush();\n     }\n </pre>\n\n\n @return the number of bytes written to the OutputStream as part of the\n token to be sent to the peer. A value of 0 indicates that no token\n needs to be sent.\n @param inStream an InputStream that contains the token generated by\n the peer. This parameter is ignored on the first call since no token\n has been or will be received from the peer at that point.\n @param outStream an OutputStream where the output token will be\n written. During the final stage of context establishment, there may be\n no bytes written.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},\n   {@link GSSException#BAD_MIC GSSException.BAD_MIC},\n   {@link GSSException#NO_CRED GSSException.NO_CRED},\n   {@link GSSException#CREDENTIALS_EXPIRED GSSException.CREDENTIALS_EXPIRED},\n   {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS},\n   {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN},\n   {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN},\n   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},\n   {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"int"},{"parameters":"byte[]:inToken,int:offset,int:len","name":"acceptSecContext","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Called by the context acceptor upon receiving a token from the\n peer. This method may return an output token which the application\n will need to send to the peer for further processing by its\n <code>initSecContext</code> call.<p>\n\n The application can call {@link #isEstablished() isEstablished} to\n determine if the context establishment phase is complete for this\n peer.  A return value of <code>false</code> from\n <code>isEstablished</code> indicates that more tokens are expected to\n be supplied to this method.    Upon completion of the context\n establishment, the available context options may be queried through\n the get methods.<p>\n\n Note that it is possible that <code>acceptSecContext</code> return a\n token for the peer, and <code>isEstablished</code> return\n <code>true</code> also.  This indicates that the token needs to be\n sent to the peer, but the local end of the context is now fully\n established.<p>\n\n Some mechanism providers might require that the caller be granted\n permission to accept a security context. A failed permission check\n might cause a {@link java.lang.SecurityException SecurityException}\n to be thrown from this method.<p>\n\n The following example code demonstrates how this method might be\n used:<p>\n <pre>\n     byte[] inToken;\n     byte[] outToken;\n     GSSContext context ...\n\n     // Loop while there is still a token to be processed\n\n     while (!context.isEstablished()) {\n         inToken = readToken();\n         outToken = context.acceptSecContext(inToken, 0,\n                                             inToken.length);\n         // send output token if generated\n         if (outToken != null)\n             sendToken(outToken);\n     }\n </pre>\n\n\n @return a byte[] containing the token to be sent to the\n peer. <code>null</code> indicates that no token is generated.\n @param inToken token generated by the peer.\n @param offset the offset within the inToken where the token begins.\n @param len the length of the token.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},\n   {@link GSSException#BAD_MIC GSSException.BAD_MIC},\n   {@link GSSException#NO_CRED GSSException.NO_CRED},\n   {@link GSSException#CREDENTIALS_EXPIRED\n                               GSSException.CREDENTIALS_EXPIRED},\n   {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS},\n   {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN},\n   {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN},\n   {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"byte"},{"parameters":"InputStream:inStream,OutputStream:outStream","name":"acceptSecContext","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Called by the context acceptor to process a token from the peer using\n streams.   It may write an output token to the\n <code>OutputStream</code>, which the application\n will need to send to the peer for processing by its\n <code>initSecContext</code> method.  Typically, the application would\n ensure this by calling the  {@link java.io.OutputStream#flush() flush}\n method on an <code>OutputStream</code> that encapsulates the\n connection between the two peers. The application can call\n {@link #isEstablished() isEstablished} to determine if the context\n establishment phase is complete on this side of the context. A\n return  value of <code>false</code> from <code>isEstablished</code>\n indicates that more tokens are expected to be supplied to\n <code>acceptSecContext</code>.\n Upon completion of the context establishment, the available context\n options may be queried through the get methods.<p>\n\n Note that it is possible that <code>acceptSecContext</code> return a\n token for the peer, and <code>isEstablished</code> return\n <code>true</code> also.  This indicates that the token needs to be\n sent to the peer, but the local end of the context is now fully\n established.<p>\n\n The GSS-API authentication tokens contain a definitive start and\n end. This method will attempt to read one of these tokens per\n invocation, and may block on the stream if only part of the token is\n available. In all other respects this method is equivalent to the byte\n array based {@link #acceptSecContext(byte[], int, int)\n acceptSecContext}.<p>\n\n Some mechanism providers might require that the caller be granted\n permission to accept a security context. A failed permission check\n might cause a {@link java.lang.SecurityException SecurityException}\n to be thrown from this method.<p>\n\n The following example code demonstrates how this method might be\n used:<p>\n <pre>\n     InputStream is ...\n     OutputStream os ...\n     GSSContext context ...\n\n     // Loop while there is still a token to be processed\n\n     while (!context.isEstablished()) {\n\n         context.acceptSecContext(is, os);\n\n         // send output token if generated\n         os.flush();\n     }\n </pre>\n\n\n @param inStream an InputStream that contains the token generated by\n the peer.\n @param outStream an OutputStream where the output token will be\n written. During the final stage of context establishment, there may be\n no bytes written.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},\n   {@link GSSException#BAD_MIC GSSException.BAD_MIC},\n   {@link GSSException#NO_CRED GSSException.NO_CRED},\n   {@link GSSException#CREDENTIALS_EXPIRED\n                           GSSException.CREDENTIALS_EXPIRED},\n   {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS},\n   {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN},\n   {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN},\n   {@link GSSException#BAD_MECH GSSException.BAD_MECH},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":null,"name":"isEstablished","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Used during context establishment to determine the state of the\n context.\n\n @return <code>true</code> if this is a fully established context on\n the caller's side and no more tokens are needed from the peer.\n","return_type":"boolean"},{"parameters":null,"name":"dispose","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Releases any system resources and cryptographic information stored in\n the context object and invalidates the context.\n\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"int:qop,boolean:confReq,int:maxTokenSize","name":"getWrapSizeLimit","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Used to determine limits on the size of the message\n that can be passed to <code>wrap</code>. Returns the maximum\n message size that, if presented to the <code>wrap</code> method with\n the same <code>confReq</code> and <code>qop</code> parameters, will\n result in an output token containing no more\n than <code>maxTokenSize</code> bytes.<p>\n\n This call is intended for use by applications that communicate over\n protocols that impose a maximum message size.  It enables the\n application to fragment messages prior to applying protection.<p>\n\n GSS-API implementations are recommended but not required to detect\n invalid QOP values when <code>getWrapSizeLimit</code> is called.\n This routine guarantees only a maximum message size, not the\n availability of specific QOP values for message protection.<p>\n\n @param qop the level of protection wrap will be asked to provide.\n @param confReq <code>true</code> if wrap will be asked to provide\n privacy, <code>false</code>  otherwise.\n @param maxTokenSize the desired maximum size of the token emitted by\n wrap.\n @return the maximum size of the input token for the given output\n token size\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},\n   {@link GSSException#BAD_QOP GSSException.BAD_QOP},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"int"},{"parameters":"byte[]:inBuf,int:offset,int:len,MessageProp:msgProp","name":"wrap","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Applies per-message security services over the established security\n context. The method will return a token with the\n application supplied data and a cryptographic MIC over it.\n The data may be encrypted if confidentiality (privacy) was\n requested.<p>\n\n The MessageProp object is instantiated by the application and used\n to specify a QOP value which selects cryptographic algorithms, and a\n privacy service to optionally encrypt the message.  The underlying\n mechanism that is used in the call may not be able to provide the\n privacy service.  It sets the actual privacy service that it does\n provide in this MessageProp object which the caller should then\n query upon return.  If the mechanism is not able to provide the\n requested QOP, it throws a GSSException with the BAD_QOP code.<p>\n\n Since some application-level protocols may wish to use tokens\n emitted by wrap to provide \"secure framing\", implementations should\n support the wrapping of zero-length messages.<p>\n\n The application will be responsible for sending the token to the\n peer.\n\n @param inBuf application data to be protected.\n @param offset the offset within the inBuf where the data begins.\n @param len the length of the data\n @param msgProp instance of MessageProp that is used by the\n application to set the desired QOP and privacy state. Set the\n desired QOP to 0 to request the default QOP. Upon return from this\n method, this object will contain the the actual privacy state that\n was applied to the message by the underlying mechanism.\n @return a byte[] containing the token to be sent to the peer.\n\n @throws GSSException containing the following major error codes:\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},\n   {@link GSSException#BAD_QOP GSSException.BAD_QOP},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"byte"},{"parameters":"InputStream:inStream,OutputStream:outStream,MessageProp:msgProp","name":"wrap","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Applies per-message security services over the established security\n context using streams. The method will return a\n token with the application supplied data and a cryptographic MIC over it.\n The data may be encrypted if confidentiality\n (privacy) was requested. This method is equivalent to the byte array\n based {@link #wrap(byte[], int, int, MessageProp) wrap} method.<p>\n\n The application will be responsible for sending the token to the\n peer.  Typically, the application would\n ensure this by calling the  {@link java.io.OutputStream#flush() flush}\n method on an <code>OutputStream</code> that encapsulates the\n connection between the two peers.<p>\n\n The MessageProp object is instantiated by the application and used\n to specify a QOP value which selects cryptographic algorithms, and a\n privacy service to optionally encrypt the message.  The underlying\n mechanism that is used in the call may not be able to provide the\n privacy service.  It sets the actual privacy service that it does\n provide in this MessageProp object which the caller should then\n query upon return.  If the mechanism is not able to provide the\n requested QOP, it throws a GSSException with the BAD_QOP code.<p>\n\n Since some application-level protocols may wish to use tokens\n emitted by wrap to provide \"secure framing\", implementations should\n support the wrapping of zero-length messages.<p>\n\n @param inStream an InputStream containing the application data to be\n protected. All of the data that is available in\n inStream is used.\n @param outStream an OutputStream to write the protected message\n to.\n @param msgProp instance of MessageProp that is used by the\n application to set the desired QOP and privacy state. Set the\n desired QOP to 0 to request the default QOP. Upon return from this\n method, this object will contain the the actual privacy state that\n was applied to the message by the underlying mechanism.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},\n   {@link GSSException#BAD_QOP GSSException.BAD_QOP},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"byte[]:inBuf,int:offset,int:len,MessageProp:msgProp","name":"unwrap","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Used to process tokens generated by the <code>wrap</code> method on\n the other side of the context. The method will return the message\n supplied by the peer application to its wrap call, while at the same\n time verifying the embedded MIC for that message.<p>\n\n The MessageProp object is instantiated by the application and is\n used by the underlying mechanism to return information to the caller\n such as the QOP, whether confidentiality was applied to the message,\n and other supplementary message state information.<p>\n\n Since some application-level protocols may wish to use tokens\n emitted by wrap to provide \"secure framing\", implementations should\n support the wrapping and unwrapping of zero-length messages.<p>\n\n @param inBuf a byte array containing the wrap token received from\n peer.\n @param offset the offset where the token begins.\n @param len the length of the token\n @param msgProp upon return from the method, this object will contain\n the applied QOP, the privacy state of the message, and supplementary\n information stating if the token was a duplicate, old, out of\n sequence or arriving after a gap.\n @return a byte[] containing the message unwrapped from the input\n token.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},\n   {@link GSSException#BAD_MIC GSSException.BAD_MIC},\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"byte"},{"parameters":"InputStream:inStream,OutputStream:outStream,MessageProp:msgProp","name":"unwrap","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Uses streams to process tokens generated by the <code>wrap</code>\n method on the other side of the context. The method will return the\n message supplied by the peer application to its wrap call, while at\n the same time verifying the embedded MIC for that message.<p>\n\n The MessageProp object is instantiated by the application and is\n used by the underlying mechanism to return information to the caller\n such as the QOP, whether confidentiality was applied to the message,\n and other supplementary message state information.<p>\n\n Since some application-level protocols may wish to use tokens\n emitted by wrap to provide \"secure framing\", implementations should\n support the wrapping and unwrapping of zero-length messages.<p>\n\n The format of the input token that this method\n reads is defined in the specification for the underlying mechanism that\n will be used. This method will attempt to read one of these tokens per\n invocation. If the mechanism token contains a definitive start and\n end this method may block on the <code>InputStream</code> if only\n part of the token is available. If the start and end of the token\n are not definitive then the method will attempt to treat all\n available bytes as part of the token.<p>\n\n Other than the possible blocking behavior described above, this\n method is equivalent to the byte array based {@link #unwrap(byte[],\n int, int, MessageProp) unwrap} method.<p>\n\n @param inStream an InputStream that contains the wrap token generated\n by the peer.\n @param outStream an OutputStream to write the application message\n to.\n @param msgProp upon return from the method, this object will contain\n the applied QOP, the privacy state of the message, and supplementary\n information stating if the token was a duplicate, old, out of\n sequence or arriving after a gap.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},\n   {@link GSSException#BAD_MIC GSSException.BAD_MIC},\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"byte[]:inMsg,int:offset,int:len,MessageProp:msgProp","name":"getMIC","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a token containing a cryptographic Message Integrity Code\n (MIC) for the supplied message,  for transfer to the peer\n application.  Unlike wrap, which encapsulates the user message in the\n returned token, only the message MIC is returned in the output\n token.<p>\n\n Note that privacy can only be applied through the wrap call.<p>\n\n Since some application-level protocols may wish to use tokens emitted\n by getMIC to provide \"secure framing\", implementations should support\n derivation of MICs from zero-length messages.\n\n @param inMsg the message to generate the MIC over.\n @param offset offset within the inMsg where the message begins.\n @param len the length of the message\n @param msgProp an instance of <code>MessageProp</code> that is used\n by the application to set the desired QOP.  Set the desired QOP to\n <code>0</code> in <code>msgProp</code> to request the default\n QOP. Alternatively pass in <code>null</code> for <code>msgProp</code>\n to request the default QOP.\n @return a byte[] containing the token to be sent to the peer.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},\n   {@link GSSException#BAD_QOP GSSException.BAD_QOP},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"byte"},{"parameters":"InputStream:inStream,OutputStream:outStream,MessageProp:msgProp","name":"getMIC","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Uses streams to produce a token containing a cryptographic MIC for\n the supplied message, for transfer to the peer application.\n Unlike wrap, which encapsulates the user message in the returned\n token, only the message MIC is produced in the output token. This\n method is equivalent to the byte array based {@link #getMIC(byte[],\n int, int, MessageProp) getMIC} method.\n\n Note that privacy can only be applied through the wrap call.<p>\n\n Since some application-level protocols may wish to use tokens emitted\n by getMIC to provide \"secure framing\", implementations should support\n derivation of MICs from zero-length messages.\n\n @param inStream an InputStream containing the message to generate the\n MIC over. All of the data that is available in\n inStream is used.\n @param outStream an OutputStream to write the output token to.\n @param msgProp an instance of <code>MessageProp</code> that is used\n by the application to set the desired QOP.  Set the desired QOP to\n <code>0</code> in <code>msgProp</code> to request the default\n QOP. Alternatively pass in <code>null</code> for <code>msgProp</code>\n to request the default QOP.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},\n   {@link GSSException#BAD_QOP GSSException.BAD_QOP},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"byte[]:inToken,int:tokOffset,int:tokLen,byte[]:inMsg,int:msgOffset,int:msgLen,MessageProp:msgProp","name":"verifyMIC","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Verifies the cryptographic MIC, contained in the token parameter,\n over the supplied message.<p>\n\n The MessageProp object is instantiated by the application and is used\n by the underlying mechanism to return information to the caller such\n as the QOP indicating the strength of protection that was applied to\n the message and other supplementary message state information.<p>\n\n Since some application-level protocols may wish to use tokens emitted\n by getMIC to provide \"secure framing\", implementations should support\n the calculation and verification of MICs over zero-length messages.\n\n @param inToken the token generated by peer's getMIC method.\n @param tokOffset the offset within the inToken where the token\n begins.\n @param tokLen the length of the token.\n @param inMsg the application message to verify the cryptographic MIC\n over.\n @param msgOffset the offset in inMsg where the message begins.\n @param msgLen the length of the message.\n @param msgProp upon return from the method, this object will contain\n the applied QOP and supplementary information stating if the token\n was a duplicate, old, out of sequence or arriving after a gap.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN}\n   {@link GSSException#BAD_MIC GSSException.BAD_MIC}\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED}\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"InputStream:tokStream,InputStream:msgStream,MessageProp:msgProp","name":"verifyMIC","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Uses streams to verify the cryptographic MIC, contained in the token\n parameter, over the supplied message.  This method is equivalent to\n the byte array based {@link #verifyMIC(byte[], int, int, byte[], int,\n int, MessageProp) verifyMIC} method.\n\n The MessageProp object is instantiated by the application and is used\n by the underlying mechanism to return information to the caller such\n as the QOP indicating the strength of protection that was applied to\n the message and other supplementary message state information.<p>\n\n Since some application-level protocols may wish to use tokens emitted\n by getMIC to provide \"secure framing\", implementations should support\n the calculation and verification of MICs over zero-length messages.<p>\n\n The format of the input token that this method\n reads is defined in the specification for the underlying mechanism that\n will be used. This method will attempt to read one of these tokens per\n invocation. If the mechanism token contains a definitive start and\n end this method may block on the <code>InputStream</code> if only\n part of the token is available. If the start and end of the token\n are not definitive then the method will attempt to treat all\n available bytes as part of the token.<p>\n\n Other than the possible blocking behavior described above, this\n method is equivalent to the byte array based {@link #verifyMIC(byte[],\n int, int, byte[], int, int, MessageProp) verifyMIC} method.<p>\n\n @param tokStream an InputStream containing the token generated by the\n peer's getMIC method.\n @param msgStream an InputStream containing the application message to\n verify the cryptographic MIC over. All of the data\n that is available in msgStream is used.\n @param msgProp upon return from the method, this object will contain\n the applied QOP and supplementary information stating if the token\n was a duplicate, old, out of sequence or arriving after a gap.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN}\n   {@link GSSException#BAD_MIC GSSException.BAD_MIC}\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED}\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":null,"name":"export","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Exports this context so that another process may\n import it.. Provided to support the sharing of work between\n multiple processes. This routine will typically be used by the\n context-acceptor, in an application where a single process receives\n incoming connection requests and accepts security contexts over\n them, then passes the established context to one or more other\n processes for message exchange.<p>\n\n This method deactivates the security context and creates an\n interprocess token which, when passed to {@link\n GSSManager#createContext(byte[]) GSSManager.createContext} in\n another process, will re-activate the context in the second process.\n Only a single instantiation of a given context may be active at any\n one time; a subsequent attempt by a context exporter to access the\n exported security context will fail.<p>\n\n The implementation may constrain the set of processes by which the\n interprocess token may be imported, either as a function of local\n security policy, or as a result of implementation decisions.  For\n example, some implementations may constrain contexts to be passed\n only between processes that run under the same account, or which are\n part of the same process group.<p>\n\n The interprocess token may contain security-sensitive information\n (for example cryptographic keys).  While mechanisms are encouraged\n to either avoid placing such sensitive information within\n interprocess tokens, or to encrypt the token before returning it to\n the application, in a typical GSS-API implementation this may not be\n possible.  Thus the application must take care to protect the\n interprocess token, and ensure that any process to which the token\n is transferred is trustworthy. <p>\n\n Implementations are not required to support the inter-process\n transfer of security contexts.  Calling the {@link #isTransferable()\n isTransferable} method will indicate if the context object is\n transferable.<p>\n\n Calling this method on a context that\n is not exportable will result in this exception being thrown with\n the error code {@link GSSException#UNAVAILABLE\n GSSException.UNAVAILABLE}.\n\n @return a byte[] containing the exported context\n @see GSSManager#createContext(byte[])\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE},\n   {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},\n   {@link GSSException#NO_CONTEXT GSSException.NO_CONTEXT},\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"byte"},{"parameters":"boolean:state","name":"requestMutualAuth","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Requests that mutual authentication be done during\n context establishment. This request can only be made on the context\n initiator's side and it has to be done prior to the first call to\n <code>initSecContext</code>.<p>\n\n Not all mechanisms support mutual authentication and some mechanisms\n might require mutual authentication even if the application\n doesn't. Therefore, the application should check to see if the\n request was honored with the {@link #getMutualAuthState()\n getMutualAuthState} method.<p>\n\n @param state a boolean value indicating whether mutual\n authentication should be used or not.\n @see #getMutualAuthState()\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"boolean:state","name":"requestReplayDet","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Requests that replay detection be enabled for the\n per-message security services after context establishment. This\n request can only be made on the context initiator's side and it has\n to be done prior to the first call to\n <code>initSecContext</code>. During context establishment replay\n detection is not an option and is a function of the underlying\n mechanism's capabilities.<p>\n\n Not all mechanisms support replay detection and some mechanisms\n might require replay detection even if the application\n doesn't. Therefore, the application should check to see if the\n request was honored with the {@link #getReplayDetState()\n getReplayDetState} method. If replay detection is enabled then the\n {@link MessageProp#isDuplicateToken() MessageProp.isDuplicateToken} and {@link\n MessageProp#isOldToken() MessageProp.isOldToken} methods will return\n valid results for the <code>MessageProp</code> object that is passed\n in to the <code>unwrap</code> method or the <code>verifyMIC</code>\n method.<p>\n\n @param state a boolean value indicating whether replay detection\n should be enabled over the established context or not.\n @see #getReplayDetState()\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"boolean:state","name":"requestSequenceDet","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Requests that sequence checking be enabled for the\n per-message security services after context establishment. This\n request can only be made on the context initiator's side and it has\n to be done prior to the first call to\n <code>initSecContext</code>. During context establishment sequence\n checking is not an option and is a function of the underlying\n mechanism's capabilities.<p>\n\n Not all mechanisms support sequence checking and some mechanisms\n might require sequence checking even if the application\n doesn't. Therefore, the application should check to see if the\n request was honored with the {@link #getSequenceDetState()\n getSequenceDetState} method. If sequence checking is enabled then the\n {@link MessageProp#isDuplicateToken() MessageProp.isDuplicateToken},\n {@link MessageProp#isOldToken() MessageProp.isOldToken},\n {@link MessageProp#isUnseqToken() MessageProp.isUnseqToken}, and\n {@link MessageProp#isGapToken() MessageProp.isGapToken} methods will return\n valid results for the <code>MessageProp</code> object that is passed\n in to the <code>unwrap</code> method or the <code>verifyMIC</code>\n method.<p>\n\n @param state a boolean value indicating whether sequence checking\n should be enabled over the established context or not.\n @see #getSequenceDetState()\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"boolean:state","name":"requestCredDeleg","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Requests that the initiator's credentials be\n delegated to the acceptor during context establishment. This\n request can only be made on the context initiator's side and it has\n to be done prior to the first call to\n <code>initSecContext</code>.\n\n Not all mechanisms support credential delegation. Therefore, an\n application that desires delegation should check to see if the\n request was honored with the {@link #getCredDelegState()\n getCredDelegState} method. If the application indicates that\n delegation must not be used, then the mechanism will honor the\n request and delegation will not occur. This is an exception\n to the general rule that a mechanism may enable a service even if it\n is not requested.<p>\n\n @param state a boolean value indicating whether the credentials\n should be delegated or not.\n @see #getCredDelegState()\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"boolean:state","name":"requestAnonymity","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Requests that the initiator's identity not be\n disclosed to the acceptor. This request can only be made on the\n context initiator's side and it has to be done prior to the first\n call to <code>initSecContext</code>.\n\n Not all mechanisms support anonymity for the initiator. Therefore, the\n application should check to see if the request was honored with the\n {@link #getAnonymityState() getAnonymityState} method.<p>\n\n @param state a boolean value indicating if the initiator should\n be authenticated to the acceptor as an anonymous principal.\n @see #getAnonymityState\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"boolean:state","name":"requestConf","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Requests that data confidentiality be enabled\n for the <code>wrap</code> method. This request can only be made on\n the context initiator's side and it has to be done prior to the\n first call to <code>initSecContext</code>.\n\n Not all mechanisms support confidentiality and other mechanisms\n might enable it even if the application doesn't request\n it. The application may check to see if the request was honored with\n the {@link #getConfState() getConfState} method. If confidentiality\n is enabled, only then will the mechanism honor a request for privacy\n in the {@link MessageProp#MessageProp(int, boolean) MessageProp}\n object that is passed in to the <code>wrap</code> method.<p>\n\n Enabling confidentiality will also automatically enable\n integrity.<p>\n\n @param state a boolean value indicating whether confidentiality\n should be enabled or not.\n @see #getConfState()\n @see #getIntegState()\n @see #requestInteg(boolean)\n @see MessageProp\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"boolean:state","name":"requestInteg","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Requests that data integrity be enabled\n for the <code>wrap</code> and <code>getMIC</code>methods. This\n request can only be made on the context initiator's side and it has\n to be done prior to the first call to <code>initSecContext</code>.\n\n Not all mechanisms support integrity and other mechanisms\n might enable it even if the application doesn't request\n it. The application may check to see if the request was honored with\n the {@link #getIntegState() getIntegState} method.<p>\n\n Disabling integrity will also automatically disable\n confidentiality.<p>\n\n @param state a boolean value indicating whether integrity\n should be enabled or not.\n @see #getIntegState()\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"int:lifetime","name":"requestLifetime","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Requests a lifetime in seconds for the\n context. This method can only be called on the context initiator's\n side  and it has to be done prior to the first call to\n <code>initSecContext</code>.<p>\n\n The actual lifetime of the context will depend on the capabilities of\n the underlying mechanism and the application should call the {@link\n #getLifetime() getLifetime} method to determine this.<p>\n\n @param lifetime the desired context lifetime in seconds. Use\n <code>INDEFINITE_LIFETIME</code> to request an indefinite lifetime\n and <code>DEFAULT_LIFETIME</code> to request a default lifetime.\n @see #getLifetime()\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":"ChannelBinding:cb","name":"setChannelBinding","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Sets the channel bindings to be used during context\n establishment. This method can be called on both\n the context initiator's and the context acceptor's side, but it must\n be called before context establishment begins. This means that an\n initiator must call it before the first call to\n <code>initSecContext</code> and the acceptor must call it before the\n first call to <code>acceptSecContext</code>.\n\n @param cb the channel bindings to use.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"void"},{"parameters":null,"name":"getCredDelegState","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if credential delegation is enabled on\n this context. It can be called by both the context initiator and the\n context acceptor. For a definitive answer this method must be\n called only after context establishment is complete. Note that if an\n initiator requests that delegation not be allowed the {@link\n #requestCredDeleg(boolean) requestCredDeleg} method will honor that\n request and this method will return <code>false</code> on the\n initiator's side from that point onwards. <p>\n\n @return true if delegation is enabled, false otherwise.\n @see #requestCredDeleg(boolean)\n","return_type":"boolean"},{"parameters":null,"name":"getMutualAuthState","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if mutual authentication is enabled on\n this context. It can be called by both the context initiator and the\n context acceptor. For a definitive answer this method must be\n called only after context establishment is complete. An initiator\n that requests mutual authentication can call this method after\n context completion and dispose the context if its request was not\n honored.<p>\n\n @return true if mutual authentication is enabled, false otherwise.\n @see #requestMutualAuth(boolean)\n","return_type":"boolean"},{"parameters":null,"name":"getReplayDetState","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if replay detection is enabled for the\n per-message security services from this context. It can be called by\n both the context initiator and the context acceptor. For a\n definitive answer this method must be called only after context\n establishment is complete. An initiator that requests replay\n detection can call this method after context completion and\n dispose the context if its request was not honored.<p>\n\n @return true if replay detection is enabled, false otherwise.\n @see #requestReplayDet(boolean)\n","return_type":"boolean"},{"parameters":null,"name":"getSequenceDetState","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if sequence checking is enabled for the\n per-message security services from this context. It can be called by\n both the context initiator and the context acceptor. For a\n definitive answer this method must be called only after context\n establishment is complete. An initiator that requests sequence\n checking can call this method after context completion and\n dispose the context if its request was not honored.<p>\n\n @return true if sequence checking is enabled, false otherwise.\n @see #requestSequenceDet(boolean)\n","return_type":"boolean"},{"parameters":null,"name":"getAnonymityState","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if the context initiator is\n anonymously authenticated to the context acceptor. It can be called by\n both the context initiator and the context acceptor, and at any\n time. <strong>On the initiator side, a call to this method determines\n if the identity of the initiator has been disclosed in any of the\n context establishment tokens that might have been generated thus far\n by <code>initSecContext</code>. An initiator that absolutely must be\n authenticated anonymously should call this method after each call to\n <code>initSecContext</code> to determine if the generated token\n should be sent to the peer or the context aborted.</strong> On the\n acceptor side, a call to this method determines if any of the tokens\n processed by <code>acceptSecContext</code> thus far have divulged\n the identity of the initiator.<p>\n\n @return true if the context initiator is still anonymous, false\n otherwise.\n @see #requestAnonymity(boolean)\n","return_type":"boolean"},{"parameters":null,"name":"isTransferable","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if the context is transferable to other processes\n through the use of the {@link #export() export} method.  This call\n is only valid on fully established contexts.\n\n @return true if this context can be exported, false otherwise.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"boolean"},{"parameters":null,"name":"isProtReady","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if the context is ready for per message operations to be\n used over it.  Some mechanisms may allow the usage of the\n per-message operations before the context is fully established.\n\n @return true if methods like <code>wrap</code>, <code>unwrap</code>,\n <code>getMIC</code>, and <code>verifyMIC</code> can be used with\n this context at the current stage of context establishment, false\n otherwise.\n","return_type":"boolean"},{"parameters":null,"name":"getConfState","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if data confidentiality is available\n over the context. This method can be called by both the context\n initiator and the context acceptor, but only after one of {@link\n #isProtReady() isProtReady} or {@link #isEstablished()\n isEstablished} return <code>true</code>. If this method returns\n <code>true</code>, so will {@link #getIntegState()\n getIntegState}<p>\n\n @return true if confidentiality services are available, false\n otherwise.\n @see #requestConf(boolean)\n","return_type":"boolean"},{"parameters":null,"name":"getIntegState","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if data integrity is available\n over the context. This method can be called by both the context\n initiator and the context acceptor, but only after one of {@link\n #isProtReady() isProtReady} or {@link #isEstablished()\n isEstablished} return <code>true</code>. This method will always\n return <code>true</code> if {@link #getConfState() getConfState}\n returns true.<p>\n\n @return true if integrity services are available, false otherwise.\n @see #requestInteg(boolean)\n","return_type":"boolean"},{"parameters":null,"name":"getLifetime","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines what the remaining lifetime for this\n context is. It can be called by both the context initiator and the\n context acceptor, but for a definitive answer it should be called\n only after {@link #isEstablished() isEstablished} returns\n true.<p>\n\n @return the remaining lifetime in seconds\n @see #requestLifetime(int)\n","return_type":"int"},{"parameters":null,"name":"getSrcName","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the name of the context initiator. This call is valid only\n after one of {@link #isProtReady() isProtReady} or {@link\n #isEstablished() isEstablished} return <code>true</code>.\n\n @return a GSSName that is an MN containing the name of the context\n initiator.\n @see GSSName\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSName"},{"parameters":null,"name":"getTargName","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns the name of the context acceptor. This call is valid only\n after one of {@link #isProtReady() isProtReady} or {@link\n #isEstablished() isEstablished} return <code>true</code>.\n\n @return a GSSName that is an MN containing the name of the context\n acceptor.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSName"},{"parameters":null,"name":"getMech","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines what mechanism is being used for this\n context. This method may be called before the context is fully\n established, but the mechanism returned may change on successive\n calls in the negotiated mechanism case.\n\n @return the Oid of the mechanism being used\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"Oid"},{"parameters":null,"name":"getDelegCred","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Obtains the credentials delegated by the context\n initiator to the context acceptor. It should be called only on the\n context acceptor's side, and once the context is fully\n established. The caller can use the method {@link\n #getCredDelegState() getCredDelegState} to determine if there are\n any delegated credentials.\n\n @return a GSSCredential containing the initiator's delegated\n credentials, or <code>null</code> is no credentials\n were delegated.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"GSSCredential"},{"parameters":null,"name":"isInitiator","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Determines if this is the context initiator. This\n can be called on both the context initiator's and context acceptor's\n side.\n\n @return true if this is the context initiator, false if it is the\n context acceptor.\n\n @throws GSSException containing the following\n major error codes:\n   {@link GSSException#FAILURE GSSException.FAILURE}\n","return_type":"boolean"}],"fields":[{"parameters":null,"name":"DEFAULT_LIFETIME","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" A lifetime constant representing the default context lifetime.  This\n value is set to 0.\n","return_type":null},{"parameters":null,"name":"INDEFINITE_LIFETIME","modifier":"public","static":true,"final":true,"package":"org.ietf.jgss","description":" A lifetime constant representing indefinite context lifetime.\n This value must is set to the maximum integer value in Java -\n {@link java.lang.Integer#MAX_VALUE Integer.MAX_VALUE}.\n","return_type":null}],"abstract":true,"static":false,"final":false,"package":"org.ietf.jgss","description":" This interface encapsulates the GSS-API security context and provides\n the security services that are available over the context.  Security\n contexts are established between peers using locally acquired\n credentials.  Multiple contexts may exist simultaneously between a pair\n of peers, using the same or different set of credentials.  GSS-API\n functions in a manner independent of the underlying transport protocol\n and depends on its calling application to transport the tokens that are\n generated by the security context between the peers.<p>\n\n If the caller instantiates the context using the default\n <code>GSSManager</code> instance, then the Kerberos v5 GSS-API mechanism\n is guaranteed to be available for context establishment. This mechanism\n is identified by the Oid \"1.2.840.113554.1.2.2\" and is defined in RFC\n 1964.<p>\n\n Before the context establishment phase is initiated, the context\n initiator may request specific characteristics desired of the\n established context. Not all underlying mechanisms support all\n characteristics that a caller might desire. After the context is\n established, the caller can check the actual characteristics and services\n offered by that context by means of various query methods. When using\n the Kerberos v5 GSS-API mechanism offered by the default\n <code>GSSManager</code> instance, all optional services will be\n available locally. They are mutual authentication, credential\n delegation, confidentiality and integrity protection, and per-message\n replay detection and sequencing. Note that in the GSS-API, message integrity\n is a prerequisite for message confidentiality.<p>\n\n The context establishment occurs in a loop where the\n initiator calls {@link #initSecContext(byte[], int, int) initSecContext}\n and the acceptor calls {@link #acceptSecContext(byte[], int, int)\n acceptSecContext} until the context is established. While in this loop\n the <code>initSecContext</code> and <code>acceptSecContext</code>\n methods produce tokens that the application sends over to the peer. The\n peer passes any such token as input to its <code>acceptSecContext</code>\n or <code>initSecContext</code> as the case may be.<p>\n\n During the context establishment phase, the {@link\n #isProtReady() isProtReady} method may be called to determine if the\n context can be used for the per-message operations of {@link\n #wrap(byte[], int, int, MessageProp) wrap} and {@link #getMIC(byte[],\n int, int, MessageProp) getMIC}.  This allows applications to use\n per-message operations on contexts which aren't yet fully\n established.<p>\n\n After the context has been established or the <code>isProtReady</code>\n method returns <code>true</code>, the query routines can be invoked to\n determine the actual characteristics and services of the established\n context.  The application can also start using the per-message methods\n of {@link #wrap(byte[], int, int, MessageProp) wrap} and\n {@link #getMIC(byte[], int, int, MessageProp) getMIC} to obtain\n cryptographic operations on application supplied data.<p>\n\n When the context is no longer needed, the application should call\n {@link #dispose() dispose} to release any system resources the context\n may be using.<p>\n\n A security context typically maintains sequencing and replay detection\n information about the tokens it processes. Therefore, the sequence in\n which any tokens are presented to this context for processing can be\n important. Also note that none of the methods in this interface are\n synchronized. Therefore, it is not advisable to share a\n <code>GSSContext</code> among several threads unless some application\n level synchronization is in place.<p>\n\n Finally, different mechanism providers might place different security\n restrictions on using GSS-API contexts. These will be documented by the\n mechanism provider. The application will need to ensure that it has the\n appropriate permissions if such checks are made in the mechanism layer.<p>\n\n The example code presented below demonstrates the usage of the\n <code>GSSContext</code> interface for the initiating peer.  Different\n operations on the <code>GSSContext</code> object are presented,\n including: object instantiation, setting of desired flags, context\n establishment, query of actual context flags, per-message operations on\n application data, and finally context deletion.<p>\n\n <pre>\n    // Create a context using default credentials\n    // and the implementation specific default mechanism\n    GSSManager manager ...\n    GSSName targetName ...\n    GSSContext context = manager.createContext(targetName, null, null,\n                                           GSSContext.INDEFINITE_LIFETIME);\n\n    // set desired context options prior to context establishment\n    context.requestConf(true);\n    context.requestMutualAuth(true);\n    context.requestReplayDet(true);\n    context.requestSequenceDet(true);\n\n    // establish a context between peers\n\n    byte []inToken = new byte[0];\n\n    // Loop while there still is a token to be processed\n\n    while (!context.isEstablished()) {\n\n        byte[] outToken\n            = context.initSecContext(inToken, 0, inToken.length);\n\n        // send the output token if generated\n        if (outToken != null)\n            sendToken(outToken);\n\n        if (!context.isEstablished()) {\n            inToken = readToken();\n    }\n\n     // display context information\n     System.out.println(\"Remaining lifetime in seconds = \"\n                                          + context.getLifetime());\n     System.out.println(\"Context mechanism = \" + context.getMech());\n     System.out.println(\"Initiator = \" + context.getSrcName());\n     System.out.println(\"Acceptor = \" + context.getTargName());\n\n     if (context.getConfState())\n             System.out.println(\"Confidentiality (i.e., privacy) is available\");\n\n     if (context.getIntegState())\n             System.out.println(\"Integrity is available\");\n\n     // perform wrap on an application supplied message, appMsg,\n     // using QOP = 0, and requesting privacy service\n     byte [] appMsg ...\n\n     MessageProp mProp = new MessageProp(0, true);\n\n     byte []tok = context.wrap(appMsg, 0, appMsg.length, mProp);\n\n     sendToken(tok);\n\n     // release the local-end of the context\n     context.dispose();\n\n </pre>\n\n @author Mayank Upadhyay\n @since 1.4\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
{"parameters":null,"name":"ChannelBinding","modifier":"public","varArgs":false,"synthetic":false,"enums":[],"constructors":[{"parameters":"InetAddress:initAddr,InetAddress:acceptAddr,byte[]:appData","name":"ChannelBinding","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Create a ChannelBinding object with user supplied address information\n and data.  <code>null</code> values can be used for any fields which the\n application does not want to specify.\n\n @param initAddr the address of the context initiator.\n <code>null</code> value can be supplied to indicate that the\n application does not want to set this value.\n @param acceptAddr the address of the context\n acceptor. <code>null</code> value can be supplied to indicate that\n the application does not want to set this value.\n @param appData application supplied data to be used as part of the\n channel bindings. <code>null</code> value can be supplied to\n indicate that the application does not want to set this value.\n","return_type":null},{"parameters":"byte[]:appData","name":"ChannelBinding","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Creates a ChannelBinding object without any addressing information.\n\n @param appData application supplied data to be used as part of the\n channel bindings.\n","return_type":null}],"methods":[{"parameters":null,"name":"getInitiatorAddress","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Get the initiator's address for this channel binding.\n\n @return the initiator's address. <code>null</code> is returned if\n the address has not been set.\n","return_type":"InetAddress"},{"parameters":null,"name":"getAcceptorAddress","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Get the acceptor's address for this channel binding.\n\n @return the acceptor's address. null is returned if the address has\n not been set.\n","return_type":"InetAddress"},{"parameters":null,"name":"getApplicationData","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Get the application specified data for this channel binding.\n\n @return the application data being used as part of the\n ChannelBinding. <code>null</code> is returned if no application data\n has been specified for the channel binding.\n","return_type":"byte"},{"parameters":"Object:obj","name":"equals","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Compares two instances of ChannelBinding.\n\n @param obj another ChannelBinding to compare this one with\n @return true if the two ChannelBinding's contain\n the same values for the initiator and acceptor addresses and the\n application data.\n","return_type":"boolean"},{"parameters":null,"name":"hashCode","modifier":"public","static":false,"final":false,"package":"org.ietf.jgss","description":" Returns a hashcode value for this ChannelBinding object.\n\n @return a hashCode value\n","return_type":"int"}],"fields":[{"parameters":null,"name":"initiator","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"acceptor","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null},{"parameters":null,"name":"appData","modifier":"private","static":false,"final":false,"package":"org.ietf.jgss","description":"","return_type":null}],"abstract":false,"static":false,"final":false,"package":"org.ietf.jgss","description":" This class encapsulates the concept of caller-provided channel\n binding information. Channel bindings are used to strengthen the\n quality with which peer entity authentication is provided during\n context establishment.  They enable the GSS-API callers to bind the\n establishment of the security context to relevant characteristics\n like addresses or to application specific data.<p>\n\n The caller initiating the security context must determine the\n appropriate channel binding values to set in the GSSContext object.\n The acceptor must provide an identical binding in order to validate\n that received tokens possess correct channel-related characteristics.<p>\n\n Use of channel bindings is optional in GSS-API. ChannelBinding can be\n set for the {@link GSSContext GSSContext} using the {@link\n GSSContext#setChannelBinding(ChannelBinding) setChannelBinding} method\n before the first call to {@link GSSContext#initSecContext(byte[], int, int)\n initSecContext} or {@link GSSContext#acceptSecContext(byte[], int, int)\n acceptSecContext} has been performed.  Unless the <code>setChannelBinding</code>\n method has been used to set the ChannelBinding for a GSSContext object,\n <code>null</code> ChannelBinding will be assumed. <p>\n\n Conceptually, the GSS-API concatenates the initiator and acceptor\n address information, and the application supplied byte array to form an\n octet string.  The mechanism calculates a MIC over this octet string and\n binds the MIC to the context establishment token emitted by\n <code>initSecContext</code> method of the <code>GSSContext</code>\n interface.  The same bindings are set by the context acceptor for its\n <code>GSSContext</code> object and during processing of the\n <code>acceptSecContext</code> method a MIC is calculated in the same\n way. The calculated MIC is compared with that found in the token, and if\n the MICs differ, accept will throw a <code>GSSException</code> with the\n major code set to {@link GSSException#BAD_BINDINGS BAD_BINDINGS}, and\n the context will not be established. Some mechanisms may include the\n actual channel binding data in the token (rather than just a MIC);\n applications should therefore not use confidential data as\n channel-binding components.<p>\n\n  Individual mechanisms may impose additional constraints on addresses\n  that may appear in channel bindings.  For example, a mechanism may\n  verify that the initiator address field of the channel binding\n  contains the correct network address of the host system.  Portable\n  applications should therefore ensure that they either provide correct\n  information for the address fields, or omit setting of the addressing\n  information.\n\n @author Mayank Upadhyay\n @since 1.4\n","return_type":null,"enum_ids":null,"constructor_ids":null,"method_ids":null,"field_ids":null}
